<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>STL on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/cpp/stl/</link>
    <description>Recent content in STL on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020 - 2021, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 17 Nov 2020 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/cpp/stl/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>01. string</title>
        <link>https://yorkfish.github.io/review/cpp/stl/01-string/</link>
        <pubDate>Tue, 24 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/01-string/</guid>
        <description>c_str() empty() clear() size(), length() begin(), end(), rbegin(), rend() front(), back() push_back(), pop_back() erase() find(), rfind() substr(起始索引[, 子串长度]) 1. 定义与输出 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt; using namespace std; int main() { string s1; //</description>
      </item>
      
      <item>
        <title>02. vector</title>
        <link>https://yorkfish.github.io/review/cpp/stl/02-vector/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/02-vector/</guid>
        <description>[], at() empty() clear() size() begin(), end() rbegin(), rend() front(), back() push_back(), pop_pack() insert() insert(p, t) insert(p, n, t) insert(p, i, j) erase(p) erase(t, k) 1. 简介 vector 是动态数组，使用前需导入 &amp;lt;vector&amp;gt; 支持随机访问，不支持在任意位置 O(1) 插入，即在非末尾插入或删</description>
      </item>
      
      <item>
        <title>03. queue</title>
        <link>https://yorkfish.github.io/review/cpp/stl/03-queue/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/03-queue/</guid>
        <description>empty() size() front(), back() push(), pop() empty() size() push(), pop() top() 1. 简介 队列 队列是用堆实现的 队列底层是用 deque 与 vector 实现的 是一个配适器类 不允许随机访问元素 不能遍历队列 元素只能先进先出 (FIFO) 优先队</description>
      </item>
      
      <item>
        <title>04. stack</title>
        <link>https://yorkfish.github.io/review/cpp/stl/04-stack/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/04-stack/</guid>
        <description>empty() size() top() push() pop() 1. 简介 适配器 可以将任意类型的序列容器转换为一个堆栈，一般使用 deque 作为支持的序列容器 元素只能先进后出 (FILO) 不能遍历整个 stack 给 vector 提供了栈接口 与</description>
      </item>
      
      <item>
        <title>05. deque</title>
        <link>https://yorkfish.github.io/review/cpp/stl/05-deque/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/05-deque/</guid>
        <description>empty() size() begin(), end() front(), back() push_front(), push_back() pop_front(), pop_back() clear() [] 1. 简介 deque: double-ended queue 双端队列 deque 是一个支持在两端高效插入或删除元素的连续线性存储空间 它就像是 vector 和 queue 的结合 与 vector 相比，deque 的</description>
      </item>
      
      <item>
        <title>06. set</title>
        <link>https://yorkfish.github.io/review/cpp/stl/06-set/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/06-set/</guid>
        <description>empty() size() clear() begin(), end() ++, &amp;ndash; insert() find() lower_bound(), upper_bound() erase() count() 1. 简介 &amp;lt;set&amp;gt; 主要包括 set 和 multiset 两个容器，分别是“有序集合”和“有序多重集合” set 的元素不能重复，multiset 可以，它们支</description>
      </item>
      
      <item>
        <title>07. map</title>
        <link>https://yorkfish.github.io/review/cpp/stl/07-map/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/07-map/</guid>
        <description>empty() size() clear() begin(), end() ++, &amp;ndash; insert() find() erase() count() [] 时间复杂度 O(logn), multimap 不支持此操作 lower_bound(), upper_bound() 1. 简介 map 容器是一个键值对 key-value 的映射，其内部实现是一棵以 key 为关键码的红黑树 Map 的 key 和 value 可以是</description>
      </item>
      
      <item>
        <title>08. unordered_set</title>
        <link>https://yorkfish.github.io/review/cpp/stl/08-unordered-set/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/08-unordered-set/</guid>
        <description>empty() size() begin(), end() ++, &amp;ndash; insert() find() erase() count() ps 一些哈希表，如 unordered_set, unordered_map, unordered_multiset, unordered_multimap 和 set/multiset, map/multimap 类似，增删改查的时间复杂度是 O(1) 不支持 lower_bound()/upper_bound()</description>
      </item>
      
      <item>
        <title>09. unordered_map</title>
        <link>https://yorkfish.github.io/review/cpp/stl/09-unordered-map/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/09-unordered-map/</guid>
        <description>empty() size() begin(), end() ++, &amp;ndash; insert() find() erase() count() 1. 定义 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;iostream&amp;gt;#include &amp;lt;unordered_map&amp;gt; using namespace std; int main() { unordered_map&amp;lt;int, int&amp;gt; a; // C++11 开始支持 unordered_multimap&amp;lt;int, int&amp;gt; b; // 不常用 return 0; } 2. 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14</description>
      </item>
      
      <item>
        <title>10. list</title>
        <link>https://yorkfish.github.io/review/cpp/stl/10-list/</link>
        <pubDate>Tue, 24 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/10-list/</guid>
        <description>empty() size() begin(), end() push_front(), push_back() pop_front(), pop_back() emplace_front(), emplace_back() insert() sort() merge() remove() unique() 1. 简介 在任意位置插入与删除一个元素时间是固定的 优点：元素可快速插入与删除 缺点：不能随机访问 插入或删除元素之后，</description>
      </item>
      
      <item>
        <title>11. bitset</title>
        <link>https://yorkfish.github.io/review/cpp/stl/11-bitset/</link>
        <pubDate>Tue, 09 Mar 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/11-bitset/</guid>
        <description>~, &amp;amp;, |, ^ &amp;laquo;, &amp;raquo; ==, != [] size() count() test() any() none() all() set() set(k, v) set(k) reset() flip() flip(k) to_string() to_ulong() to_ullong() 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include &amp;lt;iostream&amp;gt;#include &amp;lt;bitset&amp;gt; using namespace std; int main() { bitset&amp;lt;8&amp;gt; s1; // 无参构造，长度为 8，默</description>
      </item>
      
    
  </channel>
</rss>