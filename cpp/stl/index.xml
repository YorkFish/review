<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>STL on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/cpp/stl/</link>
    <description>Recent content in STL on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 17 Nov 2020 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/cpp/stl/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>01. string</title>
        <link>https://yorkfish.github.io/review/cpp/stl/01_string/</link>
        <pubDate>Tue, 24 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/01_string/</guid>
        <description>1. 定义与输出 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt; using namespace std; int main() { string s1; // 默认的空字符串 string s2 = s1; // s2 是 s1 的一个副本 string s3 = &amp;#34;york&amp;#34;; // s3 是字符串字面值的一</description>
      </item>
      
      <item>
        <title>02. vector</title>
        <link>https://yorkfish.github.io/review/cpp/stl/02_vector/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/02_vector/</guid>
        <description>1. 简介 vector 是动态数组，使用前需导入 &amp;lt;vector&amp;gt; 支持随机访问，不支持在任意位置 O(1) 插入 元素的增删一般应该在末尾进行 可以按照字典序比较 2. 定义 1 2 3 4 5 6 7 8 9</description>
      </item>
      
      <item>
        <title>03. queue</title>
        <link>https://yorkfish.github.io/review/cpp/stl/03_queue/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/03_queue/</guid>
        <description>1. 简介 队列是用堆实现的 队列底层是用 deque 与 vector 实现的 2. 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include &amp;lt;iostream&amp;gt;#include &amp;lt;queue&amp;gt; using namespace std; struct rect1 { int x, y; }; int main() { // 1. 循环</description>
      </item>
      
      <item>
        <title>04. deque</title>
        <link>https://yorkfish.github.io/review/cpp/stl/05_deque/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/05_deque/</guid>
        <description>1. 简介 deque: double-ended queue 双端队列 deque 是一个支持在两端高效插入或删除元素的连续线性存储空间 它就像是 vector 和 queue 的结合 与 vector 相比，deque 的优势是可以在头部增删元素</description>
      </item>
      
      <item>
        <title>04. stack</title>
        <link>https://yorkfish.github.io/review/cpp/stl/04_stack/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/04_stack/</guid>
        <description>1. 简介 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt; using namespace std; int main() { stack&amp;lt;int&amp;gt; stk; stk.push(1); // 压栈 stk.push(2); stk.push(3); cout &amp;lt;&amp;lt; stk.top() &amp;lt;&amp;lt; endl; // 取栈顶元素 stk.pop(); // 这个 pop 无返回值 cout &amp;lt;&amp;lt; stk.top() &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; stk.size() &amp;lt;&amp;lt; endl; return 0;</description>
      </item>
      
      <item>
        <title>05. set</title>
        <link>https://yorkfish.github.io/review/cpp/stl/06_set/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/06_set/</guid>
        <description>1. 简介 &amp;lt;set&amp;gt; 主要包括 set 和 multiset 两个容器，分别是“有序集合”和“有序多重集合” set 的元素不能重复，multiset 可以 set 和 multiset 的内部实现是一棵红黑树，它们</description>
      </item>
      
      <item>
        <title>06. map</title>
        <link>https://yorkfish.github.io/review/cpp/stl/07_map/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/07_map/</guid>
        <description>1. 简介 map 容器是一个键值对 key-value 的映射，其内部实现是一棵以 key 为关键码的红黑树 Map 的 key 和 value 可以是任意类型，其中 key 必须重载 &amp;lt; 2. 定义 1 2 3 4 5 6 7 8 9 10 11</description>
      </item>
      
      <item>
        <title>07. unordered_set</title>
        <link>https://yorkfish.github.io/review/cpp/stl/08_unordered_set/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/08_unordered_set/</guid>
        <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include &amp;lt;iostream&amp;gt;#include &amp;lt;unordered_set&amp;gt; using namespace std; int main() { unordered_set&amp;lt;int&amp;gt; a; // 哈系表，与 set 相比，没有 lower_bound(), upper_bound() unordered_multiset&amp;lt;int&amp;gt; b; // 哈系表，可以存储重复元素 cout &amp;lt;&amp;lt; a.empty() &amp;lt;&amp;lt; endl; a.insert(1); cout &amp;lt;&amp;lt; *a.find(1)</description>
      </item>
      
      <item>
        <title>08. unordered_map</title>
        <link>https://yorkfish.github.io/review/cpp/stl/09_unordered_map/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/09_unordered_map/</guid>
        <description>1. 定义 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;iostream&amp;gt;#include &amp;lt;unordered_map&amp;gt; using namespace std; int main() { unordered_map&amp;lt;int, int&amp;gt; a; // C++11 开始支持 unordered_multimap&amp;lt;int, int&amp;gt; b; // 不常用 return 0; } 2. 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description>
      </item>
      
      <item>
        <title>10. list</title>
        <link>https://yorkfish.github.io/review/cpp/stl/10_list/</link>
        <pubDate>Tue, 24 Nov 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/cpp/stl/10_list/</guid>
        <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;iostream&amp;gt;#include &amp;lt;list&amp;gt; using namespace std; int main() { list&amp;lt;int&amp;gt; li; li.push_back(2); li.push_front(1); li.emplace_front(0); // 主要用于插入自定义的 struct li.emplace_back(3); li.insert(++ li.begin(), 6); // 增删 O(1)，查询 O(n) for (auto tmp : li) cout &amp;lt;&amp;lt; tmp &amp;lt;&amp;lt; &amp;#39; &amp;#39;;</description>
      </item>
      
    
  </channel>
</rss>