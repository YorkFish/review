<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/mysql/basics/</link>
    <description>Recent content in Basics on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020 - 2021, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 24 Apr 2021 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/mysql/basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>01. Basic Command</title>
        <link>https://yorkfish.github.io/review/mysql/basics/01-basic-command/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/01-basic-command/</guid>
        <description>登录数据库服务器 方式一 1 york$ mysql -uroot -p12345 方式二 1 2 york$ mysql -u root -p Enter password: 12345 查看数据库服务器中所有的数据库 1 2 3 4 5 6 7 8 9 10 11 mysql&amp;gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | |</description>
      </item>
      
      <item>
        <title>02. Create</title>
        <link>https://yorkfish.github.io/review/mysql/basics/02-create/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/02-create/</guid>
        <description>在数据库服务器中创建数据库 1 2 mysql&amp;gt; create database test; Query OK, 1 row affected (0.07 sec) 选择数据库 1 2 mysql&amp;gt; use test; Database changed 查看选中的数据库中所有的数据表 1 2 mysql&amp;gt; show tables; Empty set (0.00 sec) 创建数据表 语法 1</description>
      </item>
      
      <item>
        <title>03. Add Record</title>
        <link>https://yorkfish.github.io/review/mysql/basics/03-add-record/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/03-add-record/</guid>
        <description>查看数据表中的记录 1 2 mysql&amp;gt; select * from pet; Empty set (0.01 sec) 往数据表中添加数据记录 1 2 3 4 5 6 7 8 9 10 11 mysql&amp;gt; INSERT INTO pet -&amp;gt; VALUES(&amp;#39;Puffball&amp;#39;, &amp;#39;Diane&amp;#39;, &amp;#39;hamster&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;1999-03-30&amp;#39;, NULL); Query OK, 1 row affected (0.01 sec) mysql&amp;gt; select * from pet; +----------+-------+---------+--------+------------+-------+ | name | owner</description>
      </item>
      
      <item>
        <title>04. Data Type</title>
        <link>https://yorkfish.github.io/review/mysql/basics/04-data-type/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/04-data-type/</guid>
        <description>更多信息可见菜鸟教程：&amp;gt;&amp;gt;&amp;gt; 传送门 常用数据类型 MySQL 支持多种类型，大致可以分为三类 数值类型 日期/时间类型 字符串（字符）类型 数值</description>
      </item>
      
      <item>
        <title>05. Insert Delete Update Select</title>
        <link>https://yorkfish.github.io/review/mysql/basics/05-insert-delete-update-select/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/05-insert-delete-update-select/</guid>
        <description>INSERT 不区分大小写，因为小写会被转为大写 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 mysql&amp;gt; INSERT INTO pet VALUES(&amp;#39;Fluffy&amp;#39;, &amp;#39;Harold&amp;#39;, &amp;#39;cat&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;1993-02-04&amp;#39;, NULL); Query OK, 1 row affected (0.01 sec) mysql&amp;gt; INSERT INTO pet VALUES(&amp;#39;Claws&amp;#39;, &amp;#39;Gwen&amp;#39;, &amp;#39;cat&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;1994-03-07&amp;#39;,</description>
      </item>
      
      <item>
        <title>06. Primary Key</title>
        <link>https://yorkfish.github.io/review/mysql/basics/06-primary-key/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/06-primary-key/</guid>
        <description>几种建表约束 主键约束 自增约束 外键约束 唯一约束 非空约束 默认约束 主键约束 能够唯一确定一张表中的一条记录 我们通过给某个字段添加约束，可以使得改字段</description>
      </item>
      
      <item>
        <title>07. Primary Key Union</title>
        <link>https://yorkfish.github.io/review/mysql/basics/07-primary-key-union/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/07-primary-key-union/</guid>
        <description>建表 语法 1 2 3 4 5 6 create table user2( id int, name varchar(20), password varchar(20), primary key(id, name) ); ps: 这里相当于打草稿，可以改，写完可以整个复制到命令行中 操作 1 2 3 4 5 6 7 mysql&amp;gt; create table user2( -&amp;gt; id int, -&amp;gt; name varchar(20), -&amp;gt;</description>
      </item>
      
      <item>
        <title>08. Auto Increment</title>
        <link>https://yorkfish.github.io/review/mysql/basics/08-auto-increment/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/08-auto-increment/</guid>
        <description>建表 语法 1 2 3 4 create table user3( id int primary key auto_increment, name varchar(20) ); 操作 1 2 3 4 5 mysql&amp;gt; create table user3( -&amp;gt; id int primary key auto_increment, -&amp;gt; name varchar(20) -&amp;gt; ); Query OK, 0 rows affected (0.06 sec) 添加数据 1 2 mysql&amp;gt; insert into user3 (name) values(&amp;#39;zhangsan&amp;#39;); Query OK, 1 row affected (0.01 sec) 查看 1</description>
      </item>
      
      <item>
        <title>09. Add and Remove after Created</title>
        <link>https://yorkfish.github.io/review/mysql/basics/09-add-and-remove-after-created/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/09-add-and-remove-after-created/</guid>
        <description>建表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 mysql&amp;gt; create table user4( -&amp;gt; id int, -&amp;gt; name varchar(20) -&amp;gt; ); Query OK, 0 rows affected (0.06 sec) mysql&amp;gt; desc user4; +-------+-------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+-------------+------+-----+---------+-------+ | id | int | YES | | NULL | | | name | varchar(20) | YES</description>
      </item>
      
      <item>
        <title>10. Unique</title>
        <link>https://yorkfish.github.io/review/mysql/basics/10-unique/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/10-unique/</guid>
        <description>简介 约束被修饰的字段，使其值不能重复 建表 1 2 3 4 5 mysql&amp;gt; create table user5( -&amp;gt; id int, -&amp;gt; name varchar(20) -&amp;gt; ); Query OK, 0 rows affected (0.06 sec) 添加唯一约束 1 2 3 4 5 6 7 8 9 10 11 12 mysql&amp;gt; alter table user5 add unique(name); Query OK,</description>
      </item>
      
      <item>
        <title>11. NOT NULL</title>
        <link>https://yorkfish.github.io/review/mysql/basics/11-not-null/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/11-not-null/</guid>
        <description>简介 修饰的字段不能为空(NULL) 建表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 mysql&amp;gt; create table user9( -&amp;gt; id int, -&amp;gt; name varchar(20) not null -&amp;gt; ); Query OK, 0 rows affected (0.04 sec) mysql&amp;gt; desc user9; +-------+-------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra</description>
      </item>
      
      <item>
        <title>12. Default</title>
        <link>https://yorkfish.github.io/review/mysql/basics/12-default/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/12-default/</guid>
        <description>简介 当我们插入字段值的时候，如果没有传值，就会使用默认值 建表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 mysql&amp;gt; create table user10( -&amp;gt; id int, -&amp;gt; name varchar(20), -&amp;gt; age int default 10 -&amp;gt; ); Query OK, 0 rows affected (0.06 sec)</description>
      </item>
      
      <item>
        <title>13. Foreign Key</title>
        <link>https://yorkfish.github.io/review/mysql/basics/13-foreign-key/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/13-foreign-key/</guid>
        <description>简介 涉及到两个表：父表（主表）、子表（副表） 建表 班级表 1 2 3 4 5 mysql&amp;gt; create table classes( -&amp;gt; id int primary key, -&amp;gt; name varchar(20) -&amp;gt; ); Query OK, 0 rows affected (0.08 sec) 学生表 1 2 3 4 5 6 7 mysql&amp;gt; create table students( -&amp;gt; id int</description>
      </item>
      
      <item>
        <title>14. 1NF</title>
        <link>https://yorkfish.github.io/review/mysql/basics/14-1nf/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/14-1nf/</guid>
        <description>数据库的三大设计范式 第一范式 第二范式 第三范式 第一范式简介 数据表中的所有字段都是不可分割的原子值 建表 1 2 3 4 5 6 mysql&amp;gt; create table student2( -&amp;gt; id int primary key, -&amp;gt; name varchar(20), -&amp;gt; address varchar(30)</description>
      </item>
      
      <item>
        <title>15. 2NF</title>
        <link>https://yorkfish.github.io/review/mysql/basics/15-2nf/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/15-2nf/</guid>
        <description>简介 前提：需要满足第一范式 此外：除主键外的每一列必须完全依赖于主键 如果要出现不完全依赖，只能发生在联合主键的情况下 完全依赖：主键完全推导出它</description>
      </item>
      
      <item>
        <title>16. 3NF</title>
        <link>https://yorkfish.github.io/review/mysql/basics/16-3nf/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/basics/16-3nf/</guid>
        <description>简介 前提：必须满足第二范式 此外：除主键列以外的其他列不能有传递依赖关系 建表 非第三范式 1 2 3 4 5 6 create table myorder( order_id int primary key, product_id int, customer_id int, customer_phone varchar(15) ); 第三范式 1 2 3 4</description>
      </item>
      
    
  </channel>
</rss>