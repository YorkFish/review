<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advance on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/mysql/advance/</link>
    <description>Recent content in Advance on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020 - 2021, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 24 Apr 2021 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/mysql/advance/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>01. Join and Query</title>
        <link>https://yorkfish.github.io/review/mysql/advance/01-join-and-query/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/advance/01-join-and-query/</guid>
        <description>SQL 的四种连接查询 内连接 inner join join 外连接 左连接 left join left outer join 右连接 right join right outer join 完全个连接 full join full outer join 建表 先新建一个数据库 1 create database testJoin; 1 2 3 4 5 mysql&amp;gt; create database testJoin; Query OK, 1 row</description>
      </item>
      
      <item>
        <title>02. Transaction</title>
        <link>https://yorkfish.github.io/review/mysql/advance/02-transaction/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/advance/02-transaction/</guid>
        <description>简介 mysql 中，事务其实是一个最小的不可分割的工作单位 事务能保证一个业务的完整性 举例 银行转账 a -&amp;gt; -100 update user set money = money-100 where name = &amp;quot;a&amp;quot;; b -&amp;gt; +100 update user set money = money+100 where name = &amp;quot;b&amp;quot;; 实</description>
      </item>
      
      <item>
        <title>03. Commit and Rollback</title>
        <link>https://yorkfish.github.io/review/mysql/advance/03-commit-and-rollback/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/advance/03-commit-and-rollback/</guid>
        <description>简介 mysql 默认是开启事务（自动提交）的 1 2 3 4 5 6 7 mysql&amp;gt; select @@autocommit; +--------------+ | @@autocommit | +--------------+ | 1 | +--------------+ 1 row in set (0.00 sec) 当我们去执行一个 sql 语句的时候，效果会立即体现出来，且不能</description>
      </item>
      
      <item>
        <title>04. Begin Start Transaction</title>
        <link>https://yorkfish.github.io/review/mysql/advance/04-begin-start-transaction/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/advance/04-begin-start-transaction/</guid>
        <description>还原 autocommit 1 2 3 4 5 6 7 8 9 10 mysql&amp;gt; set autocommit = 1; Query OK, 0 rows affected (0.00 sec) mysql&amp;gt; select @@autocommit; +--------------+ | @@autocommit | +--------------+ | 1 | +--------------+ 1 row in set (0.00 sec) 手动开启一个事务 begin start transaction 例1 1 2 3 4 5 6 7 8 9 10 11 12 13 14</description>
      </item>
      
      <item>
        <title>05. ACID</title>
        <link>https://yorkfish.github.io/review/mysql/advance/05-acid/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/advance/05-acid/</guid>
        <description>事务的四大特征 A: 原子性，事务是最小的单位，不可再分割 C: 一致性，事务要求，同一事务中的 sql 语句，必须保证同时成功或者同时失败 I: 隔离性，事务一和事</description>
      </item>
      
      <item>
        <title>06. Dirty Read</title>
        <link>https://yorkfish.github.io/review/mysql/advance/06-dirty-read/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/advance/06-dirty-read/</guid>
        <description>事务的隔离性 名词 释义 read uncommitted; 读未提交的 read committed; 读已提交的 repeatable read; 可重复读 serializable; 串行化 read uncommitted 如果有事务 a 与事务 b a 对数据进行操作，在操作的过程中，事务没有提交，</description>
      </item>
      
      <item>
        <title>07. Read Committed</title>
        <link>https://yorkfish.github.io/review/mysql/advance/07-read-committed/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/advance/07-read-committed/</guid>
        <description>修改隔离级别 1 2 3 4 5 6 7 8 9 10 mysql&amp;gt; set global transaction isolation level read committed; Query OK, 0 rows affected (0.00 sec) mysql&amp;gt; select @@global.transaction_isolation; +--------------------------------+ | @@global.transaction_isolation | +--------------------------------+ | READ-COMMITTED | +--------------------------------+ 1 row in set (0.00 sec) 开始举例 小张开启一个事务 1 2 3 4 5 6 7 8 9</description>
      </item>
      
      <item>
        <title>08. Repeatable Read</title>
        <link>https://yorkfish.github.io/review/mysql/advance/08-repeatable-read/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/advance/08-repeatable-read/</guid>
        <description>修改隔离级别 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 mysql&amp;gt; set global transaction isolation level repeatable read; Query OK, 0 rows affected (0.00 sec) mysql&amp;gt; select @@global.transaction_isolation; +--------------------------------+ | @@global.transaction_isolation | +--------------------------------+ | REPEATABLE-READ | +--------------------------------+ 1 row in set (0.00 sec) mysql&amp;gt; select * from user; +----+--------+-------+ | id |</description>
      </item>
      
      <item>
        <title>09. Serializable</title>
        <link>https://yorkfish.github.io/review/mysql/advance/09-serializable/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/mysql/advance/09-serializable/</guid>
        <description>修改隔离级别 1 2 3 4 5 6 7 8 9 10 mysql&amp;gt; set global transaction isolation level serializable; Query OK, 0 rows affected (0.00 sec) mysql&amp;gt; select @@global.transaction_isolation; +--------------------------------+ | @@global.transaction_isolation | +--------------------------------+ | SERIALIZABLE | +--------------------------------+ 1 row in set (0.00 sec) 开始举例 小张开启一个事务 1 2 mysql&amp;gt; start transaction; Query OK, 0 rows affected</description>
      </item>
      
    
  </channel>
</rss>