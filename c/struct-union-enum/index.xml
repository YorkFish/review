<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>struct-union-enum on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/c/struct-union-enum/</link>
    <description>Recent content in struct-union-enum on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 10 Sep 2020 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/c/struct-union-enum/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>01. 结构体概述</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/01_overview_of_struct/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/01_overview_of_struct/</guid>
        <description>一般声明形式 struct 结构体名 { 成员列表 }; 举例 1 2 3 4 5 6 7 8 struct student { char name[20]; char addr[30]; char gender; int age; int num; float score; }; ps 不要忽略最后的分号 “结构体名”用作结构体类型的标志，</description>
      </item>
      
      <item>
        <title>02. 定义方法</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/02_define/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/02_define/</guid>
        <description>1. 先声明，再定义 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; struct student { char name[20]; char gender; int num; }; int main() { struct student st1; return 0; } 2. 声明的同时定义 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;stdio.h&amp;gt; struct student { char name[20]; char</description>
      </item>
      
      <item>
        <title>03. typedef</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/03_typedef/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/03_typedef/</guid>
        <description>1. 作用 声明新的类型名，代替已有的类型名 2. 简介 用 typedef 可以声明各种类型名，但不能用来定义变量 #define 是在预编译时处理的，它只能作简单的字符串替换 typedef 是在编</description>
      </item>
      
      <item>
        <title>04. 结构体变量的使用</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/04_usage/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/04_usage/</guid>
        <description>1. 引用的方式 一般形式 结构体变量名.成员名 如：student1.num = 10010; . 是成员（分量）运算符，它在所有的运算符中优先级最高的 举例 1 2 3 4 5</description>
      </item>
      
      <item>
        <title>05. 结构体数组</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/05_struct_array/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/05_struct_array/</guid>
        <description>1. 定义 例一 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; typedef struct student { char name[20]; char gender; int num; } Student; int main() { Student stu[3]; return 0; } 例二 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;stdio.h&amp;gt; struct student { char name[20]; char gender; int</description>
      </item>
      
      <item>
        <title>06. 结构体类型的大小</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/06_sizeof_struct/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/06_sizeof_struct/</guid>
        <description>并不是简单地累加成员变量占用的大小 举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include &amp;lt;stdio.h&amp;gt; struct test1 { char gender; }; struct test2 { char gender; int num;</description>
      </item>
      
      <item>
        <title>06. 链表</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/06_linked_list/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/06_linked_list/</guid>
        <description>1. 简介 链表可以根据需要开辟内存单元 链表有一个“头指针”变量 它存放一个地址 该地址指向一个元素 链表中每一个元素称为“结点” 每个结点都应包括两个部</description>
      </item>
      
      <item>
        <title>07. 共用体概述</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/07_overview_of_union/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/07_overview_of_union/</guid>
        <description>1. 一般定义形式 union 共用体 { 成员表列 } 变量表列; 2. 说明 使几种不同的变量共占同一段内存的结构，称为“共用体” 共用体与结构体的定义形式相似，但它们的</description>
      </item>
      
      <item>
        <title>08. 共用体的特点与使用</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/08_characteristics_of_union/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/08_characteristics_of_union/</guid>
        <description>1. 说明 每一瞬时，只有一个成员起作用 共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后，原有的成员就失效 共用体变量的地址和它的</description>
      </item>
      
      <item>
        <title>09. 枚举</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/09_enum/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/09_enum/</guid>
        <description>1. 使用场景 如果一个变量只有几种可能的值，则可以定义为枚举类型 变量的值只限于列举出来的值的范围 2. 一般定义形式 enum weekday {sun, mon, tue, wed, thu, fri, sat}; 3. 用法 例一 C 编译</description>
      </item>
      
    
  </channel>
</rss>