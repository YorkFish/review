<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pointer on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/c/pointer/</link>
    <description>Recent content in pointer on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 10 Sep 2020 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/c/pointer/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>01. 指针概述</title>
        <link>https://yorkfish.github.io/review/c/pointer/01_overview/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/01_overview/</guid>
        <description>1. 优势 正确而灵活地运用指针，可以 有效地表示复杂的数据结构 动态分配内存 方便地使用字符串 有效而方便地使用数组 调用函数时，获得一个以上的结果 直接处</description>
      </item>
      
      <item>
        <title>02. 指针的定义与使用</title>
        <link>https://yorkfish.github.io/review/c/pointer/02_definition_and_use_of_pointer/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/02_definition_and_use_of_pointer/</guid>
        <description>1. 定义 1 2 3 int i; int * pointer_1; pointer_1 = &amp;amp;i; 将变量 i 的地址存放到指针变量 pointer_1 中，pointer_1 “指向”了变量 i 指针变量中只能存放地址（指针） 2. 两个运算符 &amp;amp;:</description>
      </item>
      
      <item>
        <title>03. 一维数组与指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/03_arrays_and_pointers-1/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/03_arrays_and_pointers-1/</guid>
        <description>1. 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;stdio.h&amp;gt; int main() { int arr1[4] = {1, 2, 3, 4}; int arr2[] = {1, 2, 3, 4}; int* p1 = arr1; int* p2 = &amp;amp;arr1[0]; int arr3[5] = {0}; // 0, 0, 0, 0, 0 int arr4[5] = {1, 2, 3}; // 1, 2, 3, 0, 0 // c99,</description>
      </item>
      
      <item>
        <title>04. 多维数组与指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/04_arrays_and_pointers-2/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/04_arrays_and_pointers-2/</guid>
        <description>1. 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int arr1[3][4] = { {10, 11, 12, 13}, {14, 15, 16, 17}, {18, 19, 20, 21}}; int arr2[][4] = { {10, 11, 12, 13}, {14, 15, 16, 17}, {18, 19, 20, 21}}; int arr3[][4] = { {10}, {14, 15}, {18, 19, 20}}; Tip: 指针尽量用 p[i] 的形式，</description>
      </item>
      
      <item>
        <title>05. 二维数组传参</title>
        <link>https://yorkfish.github.io/review/c/pointer/05_array_param_transfer/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/05_array_param_transfer/</guid>
        <description>例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include &amp;lt;stdio.h&amp;gt; void traverseArray(int (*arr)[5], int arrSize, int arrColSize){ for (int i = 0; i &amp;lt; arrSize; i++) { for (int j = 0; j &amp;lt; arrColSize; j++) { printf(&amp;#34;%d &amp;#34;, arr[i][j]); } printf(&amp;#34;\n&amp;#34;); } } int main() { int nums[][5] = { {11, 12,</description>
      </item>
      
      <item>
        <title>06. 字符串与指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/06_strings_and_pointers/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/06_strings_and_pointers/</guid>
        <description>1. 字符数组和字符指针变量 字符数组：只能单个更改 字符指针：只能整体更改 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; int main() { char str1[] = &amp;#34;york&amp;#34;; str1[0] = &amp;#39;Y&amp;#39;; printf(&amp;#34;%s\n&amp;#34;, str1); char* str2 = &amp;#34;fish&amp;#34;; str2 = &amp;#34;Fish&amp;#34;; printf(&amp;#34;%s\n&amp;#34;, str2);</description>
      </item>
      
      <item>
        <title>07. 指针数组和指针的指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/07_pointer_array_and_pointer_to_pointer/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/07_pointer_array_and_pointer_to_pointer/</guid>
        <description>1. 指针数组的概念 一般定义形式 类型名 * 数组名[数组长度]; 如：int * p[4]; ps [] 比 * 优先级高 字符串比较应当用 strcmp 函数 2. 指向指针的指针 举例 1 2 3 4 5 6</description>
      </item>
      
      <item>
        <title>08. 动态分配内存与释放</title>
        <link>https://yorkfish.github.io/review/c/pointer/08_malloc_calloc_realloc_free/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/08_malloc_calloc_realloc_free/</guid>
        <description>1. malloc 函数原型 void * malloc(unsigned int size); 作用 在内存的动态存储区中分配一个长度为 size 的连续空间 此函数的值（即返回值），是一个分配域的起始地址，类型为 void 如果此函数未</description>
      </item>
      
      <item>
        <title>09. 小结</title>
        <link>https://yorkfish.github.io/review/c/pointer/09_summary/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/09_summary/</guid>
        <description>1. 常见的数据类型 定义 含义 int i 定义整型变量 int * p p 为指向整型数据的指针变量 int a[n] 定义整型数组 a，它有 n 个元素 int * p[n] 定义指针数组 p，它由 n 个指向整</description>
      </item>
      
    
  </channel>
</rss>