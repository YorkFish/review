<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/blog/</link>
    <description>Recent content in Blog on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020 - 2021, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 22 Feb 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>压缩编码</title>
        <link>https://yorkfish.github.io/review/blog/28-exercise-02-21/</link>
        <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/28-exercise-02-21/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-21&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AcWing 3240&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给定一段文字，已知单词 a1,a2,,,,,an 出现的频率分别 t1,t2,&amp;hellip;,tn。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以用 01 串给这些单词编码，即将每个单词与一个 01 串对应，使得任何一个单词的编码（对应的 01 串）不是另一个单词编码的前缀，这种编码称为前缀码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用前缀码编码一段文字是指将这段文字中的每个单词依次对应到其编码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一段文字经过前缀编码后的长度为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L = a&lt;sub&gt;1&lt;/sub&gt; 的编码长度 x t&lt;sub&gt;1&lt;/sub&gt; + a&lt;sub&gt;2&lt;/sub&gt; 的编码长度 x t&lt;sub&gt;2&lt;/sub&gt; + &amp;hellip; + a&lt;sub&gt;n&lt;/sub&gt; 的编码长度 x t&lt;sub&gt;n&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义一个前缀编码为字典序编码，指对于 1 &amp;lt;= i &amp;lt; n，a&lt;sub&gt;i&lt;/sub&gt; 的编码（对应的 01 串）的字典序在 a&lt;sub&gt;i+1&lt;/sub&gt; 编码之前，即 a&lt;sub&gt;1&lt;/sub&gt;,a&lt;sub&gt;2&lt;/sub&gt;,&amp;hellip;,a&lt;sub&gt;n&lt;/sub&gt; 的编码是按字典序升序排列的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如，文字 &lt;code&gt;E A E C D E B C C E C B D B E&lt;/code&gt; 中， 5 个单词 A,B,C,D,E 出现的频率分别为 1,3,4,2,5，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;则一种可行的编码方案是 &lt;code&gt;A:000&lt;/code&gt;, &lt;code&gt;B:001&lt;/code&gt;, &lt;code&gt;C:01&lt;/code&gt;, &lt;code&gt;D:10&lt;/code&gt;, &lt;code&gt;E:11&lt;/code&gt;，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对应的编码后的 01 串为 &lt;code&gt;1100011011011001010111010011000111&lt;/code&gt;，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对应的长度 L 为 3x1 + 3x3 + 2x4 + 2x2 + 2x5 = 34。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在这个例子中，如果使用哈夫曼(Huffman)编码，对应的编码方案是 &lt;code&gt;A:000&lt;/code&gt;, &lt;code&gt;B:01&lt;/code&gt;, &lt;code&gt;C:10&lt;/code&gt;, &lt;code&gt;D:001&lt;/code&gt;, &lt;code&gt;E:11&lt;/code&gt;，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虽然最终文字编码后的总长度只有 33，但是这个编码不满足字典序编码的性质，比如 C 的编码的字典序不在 D 的编码之前。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在这个例子中，有些人可能会想的另一个字典序编码是 &lt;code&gt;A:000&lt;/code&gt;, &lt;code&gt;B:001&lt;/code&gt;, &lt;code&gt;C:010&lt;/code&gt;, &lt;code&gt;D:011&lt;/code&gt;, &lt;code&gt;E:1&lt;/code&gt;，编码后的文字长度为 35。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请找出一个字典序编码，使得文字经过编码后的长度 L 最小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在输出时，你只需要输出最小的长度 L，而不需要输出具体的方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在上面的例子中，最小的长度 L 为 34。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>通信网络</title>
        <link>https://yorkfish.github.io/review/blog/27-exercise-02-20/</link>
        <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/27-exercise-02-20/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-20&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 3250&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;某国的军队由 N 个部门组成，为了提高安全性，部门之间建立了 M 条通路，每条通路只能单向传递信息，即一条从部门 a 到部门 b 的通路只能由 a 向 b 传递信息。&lt;/li&gt;
&lt;li&gt;信息可以通过中转的方式进行传递，即如果 a 能将信息传递到 b，b 又能将信息传递到 c，则 a 能将信息传递到 c。&lt;/li&gt;
&lt;li&gt;一条信息可能通过多次中转最终到达目的地。&lt;/li&gt;
&lt;li&gt;由于保密工作做得很好，并不是所有部门之间都互相知道彼此的存在。&lt;/li&gt;
&lt;li&gt;只有当两个部门之间可以直接或间接传递信息时，他们才彼此知道对方的存在。&lt;/li&gt;
&lt;li&gt;部门之间不会把自己知道哪些部门告诉其他部门。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://yorkfish.github.io/review/review/imgs/blog/exercises/info_net.png&#34; alt=&#34;info-net&#34;  title=&#34;net&#34;  /&gt;
&lt;/p&gt;&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>网络延时</title>
        <link>https://yorkfish.github.io/review/blog/26-exercise-02-19/</link>
        <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/26-exercise-02-19/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-19&lt;/li&gt;
&lt;li&gt;ps: 2021-02-18 没有出题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 3215&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;给定一个公司的网络，由 n 台交换机和 m 台终端电脑组成，交换机与交换机、交换机与电脑之间使用网络连接。&lt;/li&gt;
&lt;li&gt;交换机按层级设置，编号为 1 的交换机为根交换机，层级为 1。&lt;/li&gt;
&lt;li&gt;其他的交换机都连接到一台比自己上一层的交换机上，其层级为对应交换机的层级加 1。&lt;/li&gt;
&lt;li&gt;所有的终端电脑都直接连接到交换机上。&lt;/li&gt;
&lt;li&gt;当信息在电脑、交换机之间传递时，每一步只能通过自己传递到自己所连接的另一台电脑或交换机。&lt;/li&gt;
&lt;li&gt;请问，电脑与电脑之间传递消息、或者电脑与交换机之间传递消息、或者交换机与交换机之间传递消息最多需要多少步。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>最优配餐</title>
        <link>https://yorkfish.github.io/review/blog/25-exercise-02-17/</link>
        <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/25-exercise-02-17/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-17&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 3205&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;栋栋最近开了一家餐饮连锁店，提供外卖服务。&lt;/li&gt;
&lt;li&gt;随着连锁店越来越多，怎么合理的给客户送餐成为了一个急需解决的问题。&lt;/li&gt;
&lt;li&gt;栋栋的连锁店所在的区域可以看成是一个 nxn 的方格图（如下图所示），&lt;/li&gt;
&lt;li&gt;方格的格点上的位置上可能包含栋栋的分店（绿色标注）或者客户（蓝色标注），有一些格点是不能经过的（红色标注）。&lt;/li&gt;
&lt;li&gt;方格图中的线表示可以行走的道路，相邻两个格点的距离为 1。&lt;/li&gt;
&lt;li&gt;栋栋要送餐必须走可以行走的道路，而且不能经过红色标注的点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://yorkfish.github.io/review/review/imgs/blog/exercises/takeaway.png&#34; alt=&#34;stone&#34;  /&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;送餐的主要成本体现在路上所花的时间，每一份餐每走一个单位的距离需要花费 1 块钱。&lt;/li&gt;
&lt;li&gt;每个客户的需求都可以由栋栋的任意分店配送，每个分店没有配送总量的限制。&lt;/li&gt;
&lt;li&gt;现在你得到了栋栋的客户的需求，请问在最优的送餐方式下，送这些餐需要花费多大的成本。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>有趣的数</title>
        <link>https://yorkfish.github.io/review/blog/24-exercise-02-16/</link>
        <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/24-exercise-02-16/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-16&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 3195&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;我们把一个数称为有趣的，当且仅当
&lt;ol&gt;
&lt;li&gt;它的数字只包含 0,1,2,3，且这四个数字都出现过至少一次。&lt;/li&gt;
&lt;li&gt;所有的 0 都出现在所有的 1 之前，而所有的 2 都出现在所有的 3 之前。&lt;/li&gt;
&lt;li&gt;最高位数字不为 0。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;因此，符合我们定义的最小的有趣的数是 2013。&lt;/li&gt;
&lt;li&gt;除此以外，4 位的有趣的数还有两个：2031 和 2301。&lt;/li&gt;
&lt;li&gt;请计算恰好有 n 位的有趣的数的个数。&lt;/li&gt;
&lt;li&gt;由于答案可能非常大，只需要输出答案除以 10&lt;sup&gt;9&lt;/sup&gt;+7 的余数。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>机器人跳跃问题</title>
        <link>https://yorkfish.github.io/review/blog/23-exercise-02-15/</link>
        <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/23-exercise-02-15/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-15&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 730&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;机器人正在玩一个古老的基于 DOS 的游戏。&lt;/li&gt;
&lt;li&gt;游戏中有 N+1 座建筑——从 0 到 N 编号，从左到右排列。&lt;/li&gt;
&lt;li&gt;编号为 0 的建筑高度为 0 个单位，编号为 i 的建筑高度为 H(i) 个单位。&lt;/li&gt;
&lt;li&gt;起初，机器人在编号为 0 的建筑处。&lt;/li&gt;
&lt;li&gt;每一步，它跳到下一个（右边）建筑。&lt;/li&gt;
&lt;li&gt;假设机器人在第 k 个建筑，且它现在的能量值是 E，下一步它将跳到第 k+1 个建筑。&lt;/li&gt;
&lt;li&gt;如果 H(k+1)&amp;gt;E，那么机器人就失去 H(k+1)-E 的能量值，否则它将得到 E-H(k+1) 的能量值。&lt;/li&gt;
&lt;li&gt;游戏目标是到达第 N 个建筑，在这个过程中能量值不能为负数个单位。&lt;/li&gt;
&lt;li&gt;现在的问题是机器人至少以多少能量值开始游戏，才可以保证成功完成游戏？&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>积木大赛</title>
        <link>https://yorkfish.github.io/review/blog/22-exercise-02-14/</link>
        <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/22-exercise-02-14/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-14&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 507&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;春春幼儿园举办了一年一度的“积木大赛”。&lt;/li&gt;
&lt;li&gt;今年比赛的内容是搭建一座宽度为 n 的大厦，大厦可以看成由 n 块宽度为 1 的积木组成，&lt;/li&gt;
&lt;li&gt;第 i 块积木的最终高度需要是 h&lt;sub&gt;i&lt;/sub&gt;。&lt;/li&gt;
&lt;li&gt;在搭建开始之前，没有任何积木（可以看成块高度为 0 的积木）。&lt;/li&gt;
&lt;li&gt;接下来每次操作，小朋友们可以选择一段连续区间 [L,R]，然后将第 L 块到第 R 块之间（含第 L 块和第 R 块）所有积木的高度分别增加 1。&lt;/li&gt;
&lt;li&gt;小M是个聪明的小朋友，她很快想出了建造大厦的最佳策略，使得建造所需的操作次数最少。&lt;/li&gt;
&lt;li&gt;但她不是一个勤于动手的孩子，所以想请你帮忙实现这个策略，并求出最少的操作次数。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>合并果子</title>
        <link>https://yorkfish.github.io/review/blog/21-exercise-02-13/</link>
        <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/21-exercise-02-13/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-13&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 148&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;在一个果园里，达达已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。&lt;/li&gt;
&lt;li&gt;达达决定把所有的果子合成一堆。&lt;/li&gt;
&lt;li&gt;每一次合并，达达可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。&lt;/li&gt;
&lt;li&gt;可以看出，所有的果子经过 n-1 次合并之后，就只剩下一堆了。&lt;/li&gt;
&lt;li&gt;达达在合并果子时总共消耗的体力等于每次合并所耗体力之和。&lt;/li&gt;
&lt;li&gt;因为还要花大力气把这些果子搬回家，所以达达在合并果子时要尽可能地节省体力。&lt;/li&gt;
&lt;li&gt;假定每个果子重量都为 1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使达达耗费的体力最少，并输出这个最小的体力耗费值。&lt;/li&gt;
&lt;li&gt;例如有 3 种果子，数目依次为 1, 2, 9。&lt;/li&gt;
&lt;li&gt;可以先将 1, 2 堆合并，新堆数目为 3，耗费体力为 3。&lt;/li&gt;
&lt;li&gt;接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12，耗费体力为 12。&lt;/li&gt;
&lt;li&gt;所以达达总共耗费体力 = 3+12 = 15。&lt;/li&gt;
&lt;li&gt;可以证明 15 为最小的体力耗费值。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>机器翻译</title>
        <link>https://yorkfish.github.io/review/blog/20-exercise-02-12/</link>
        <pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/20-exercise-02-12/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-12&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 496&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;小晨的电脑上安装了一个机器翻译软件，他经常用这个软件来翻译英语文章。&lt;/li&gt;
&lt;li&gt;这个翻译软件的原理很简单，它只是从头到尾，依次将每个英文单词用对应的中文含义来替换。&lt;/li&gt;
&lt;li&gt;对于每个英文单词，软件会先在内存中查找这个单词的中文含义，如果内存中有，软件就会用它进行翻译；&lt;/li&gt;
&lt;li&gt;如果内存中没有，软件就会在外存中的词典内查找，查出单词的中文含义然后翻译，并将这个单词和译义放入内存，以备后续的查找和翻译。 &lt;/li&gt;
&lt;li&gt;假设内存中有 M 个单元，每单元能存放一个单词和译义。&lt;/li&gt;
&lt;li&gt;每当软件将一个新单词存入内存前，如果当前内存中已存入的单词数不超过 M−1，软件会将新单词存入一个未使用的内存单元；&lt;/li&gt;
&lt;li&gt;若内存中已存入 M 个单词，软件会清空最早进入内存的那个单词，腾出单元来，存放新单词。 &lt;/li&gt;
&lt;li&gt;假设一篇英语文章的长度为 N 个单词。&lt;/li&gt;
&lt;li&gt;给定这篇待译文章，翻译软件需要去外存查找多少次词典？&lt;/li&gt;
&lt;li&gt;假设在翻译开始前，内存中没有任何单词。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>计算系数</title>
        <link>https://yorkfish.github.io/review/blog/19-exercise-02-11/</link>
        <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/19-exercise-02-11/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-11&lt;/li&gt;
&lt;li&gt;ps: 2021-02-10 没有出题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 211&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;给定一个多项式 (ax + by)&lt;sup&gt;k&lt;/sup&gt;，请求出多项式展开后 x&lt;sup&gt;n&lt;/sup&gt;y&lt;sup&gt;m&lt;/sup&gt; 项的系数。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>乌龟棋</title>
        <link>https://yorkfish.github.io/review/blog/18-exercise-02-09/</link>
        <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/18-exercise-02-09/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-09&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 312&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;小明过生日的时候，爸爸送给他一副乌龟棋当作礼物。&lt;/li&gt;
&lt;li&gt;乌龟棋的棋盘只有一行，该行有 N 个格子，每个格子上一个分数（非负整数）。&lt;/li&gt;
&lt;li&gt;棋盘第 1 格是唯一的起点，第 N 格是终点，游戏要求玩家控制一个乌龟棋子从起点出发走到终点。&lt;/li&gt;
&lt;li&gt;乌龟棋中共有 M 张爬行卡片，分成 4 种不同的类型（M 张卡片中不一定包含所有 4 种类型的卡片），每种类型的卡片上分别标有 1, 2, 3, 4  四个数字之一，表示使用这种卡片后，乌龟棋子将向前爬行相应的格子数。&lt;/li&gt;
&lt;li&gt;游戏中，玩家每次需要从所有的爬行卡片中选择一张之前没有使用过的爬行卡片，控制乌龟棋子前进相应的格子数，每张卡片只能使用一次。&lt;/li&gt;
&lt;li&gt;游戏中，乌龟棋子自动获得起点格子的分数，并且在后续的爬行中每到达一个格子，就得到该格子相应的分数。&lt;/li&gt;
&lt;li&gt;玩家最终游戏得分就是乌龟棋子从起点到终点过程中到过的所有格子的分数总和。&lt;/li&gt;
&lt;li&gt;很明显，用不同的爬行卡片使用顺序会使得最终游戏的得分不同，小明想要找到一种卡片使用顺序使得最终游戏得分最多。&lt;/li&gt;
&lt;li&gt;现在，告诉你棋盘上每个格子的分数和所有的爬行卡片，你能告诉小明，他最多能得到多少分吗？&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>鱼塘钓鱼</title>
        <link>https://yorkfish.github.io/review/blog/17-exercise-02-08/</link>
        <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/17-exercise-02-08/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-08&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 1262&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;有 N 个鱼塘排成一排，每个鱼塘中有一定数量的鱼，例如：N=5 时，如下表&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;鱼塘编号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;第 1 分钟能钓到的鱼的数量(1&amp;hellip;1000)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;每钓鱼 1 分钟钓鱼数的减少量(1&amp;hellip;100)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;当前鱼塘到下一个相邻鱼塘需要的时间（单位：分钟）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;即：在第 1 个鱼塘中钓鱼第 1 分钟内可钓到 10 条鱼，第 2 分钟内只能钓到 8 条鱼，……，第 5 分钟以后再也钓不到鱼了。&lt;/li&gt;
&lt;li&gt;从第 1 个鱼塘到第 2 个鱼塘需要 3 分钟，从第 2 个鱼塘到第 3 个鱼塘需要 5 分钟，……&lt;/li&gt;
&lt;li&gt;给出一个截止时间 T，设计一个钓鱼方案，从第 1 个鱼塘出发，希望能钓到最多的鱼。&lt;/li&gt;
&lt;li&gt;假设能钓到鱼的数量仅和已钓鱼的次数有关，且每次钓鱼的时间都是整数分钟。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>关押罪犯</title>
        <link>https://yorkfish.github.io/review/blog/16-exercise-02-07/</link>
        <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/16-exercise-02-07/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-07&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 257&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;S 城现有两座监狱，一共关押着 N 名罪犯，编号分别为 1~N。&lt;/li&gt;
&lt;li&gt;他们之间的关系自然也极不和谐。&lt;/li&gt;
&lt;li&gt;很多罪犯之间甚至积怨已久，如果客观条件具备则随时可能爆发冲突。&lt;/li&gt;
&lt;li&gt;我们用“怨气值”（一个正整数值）来表示某两名罪犯之间的仇恨程度，怨气值越大，则这两名罪犯之间的积怨越多。&lt;/li&gt;
&lt;li&gt;如果两名怨气值为 c 的罪犯被关押在同一监狱，他们俩之间会发生摩擦，并造成影响力为 c 的冲突事件。&lt;/li&gt;
&lt;li&gt;每年年末，警察局会将本年内监狱中的所有冲突事件按影响力从大到小排成一个列表，然后上报到 S 城 Z 市长那里。&lt;/li&gt;
&lt;li&gt;公务繁忙的 Z 市长只会去看列表中的第一个事件的影响力，如果影响很坏，他就会考虑撤换警察局长。&lt;/li&gt;
&lt;li&gt;在详细考察了 N 名罪犯间的矛盾关系后，警察局长觉得压力巨大。&lt;/li&gt;
&lt;li&gt;他准备将罪犯们在两座监狱内重新分配，以求产生的冲突事件影响力都较小，从而保住自己的乌纱帽。&lt;/li&gt;
&lt;li&gt;假设只要处于同一监狱内的某两个罪犯间有仇恨，那么他们一定会在每年的某个时候发生摩擦。那么，应如何分配罪犯，才能使 Z 市长看到的那个冲突事件的影响力最小？这个最小值是多少？&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>借教室</title>
        <link>https://yorkfish.github.io/review/blog/15-exercise-02-06/</link>
        <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/15-exercise-02-06/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-06&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 503&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;在大学期间，经常需要租借教室。&lt;/li&gt;
&lt;li&gt;大到院系举办活动，小到学习小组自习讨论，都需要向学校申请借教室。&lt;/li&gt;
&lt;li&gt;教室的大小功能不同，借教室人的身份不同，借教室的手续也不一样。 &lt;/li&gt;
&lt;li&gt;面对海量租借教室的信息，我们自然希望编程解决这个问题。&lt;/li&gt;
&lt;li&gt;我们需要处理接下来 n 天的借教室信息，其中第 i 天学校有 r&lt;sub&gt;i&lt;/sub&gt; 个教室可供租借。&lt;/li&gt;
&lt;li&gt;共有 m 份订单，每份订单用三个正整数描述，分别为 d&lt;sub&gt;j&lt;/sub&gt;, s&lt;sub&gt;j&lt;/sub&gt;, t&lt;sub&gt;j&lt;/sub&gt;，&lt;/li&gt;
&lt;li&gt;表示某租借者需要从第 s&lt;sub&gt;j&lt;/sub&gt; 天到第 t&lt;sub&gt;j&lt;/sub&gt; 天租借教室（包括第 s&lt;sub&gt;j&lt;/sub&gt; 天和第 t&lt;sub&gt;j&lt;/sub&gt; 天），每天需要租借 d&lt;sub&gt;j&lt;/sub&gt; 个教室。 &lt;/li&gt;
&lt;li&gt;我们假定，租借者对教室的大小、地点没有要求。&lt;/li&gt;
&lt;li&gt;即对于每份订单，我们只需要每天提供 d&lt;sub&gt;j&lt;/sub&gt; 个教室，而它们具体是哪些教室，每天是否是相同的教室则不用考虑。 &lt;/li&gt;
&lt;li&gt;借教室的原则是先到先得，也就是说我们要按照订单的先后顺序依次为每份订单分配教室。&lt;/li&gt;
&lt;li&gt;如果在分配的过程中遇到一份订单无法完全满足，则需要停止教室的分配，通知当前申请人修改订单。&lt;/li&gt;
&lt;li&gt;这里的无法满足指从第 s&lt;sub&gt;j&lt;/sub&gt; 天到第 t&lt;sub&gt;j&lt;/sub&gt; 天中有至少一天剩余的教室数量不足 d&lt;sub&gt;j&lt;/sub&gt; 个。&lt;/li&gt;
&lt;li&gt;现在我们需要知道，是否会有订单无法完全满足。&lt;/li&gt;
&lt;li&gt;如果有，需要通知哪一个申请人修改订单。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>聪明的质监员</title>
        <link>https://yorkfish.github.io/review/blog/14-exercise-02-05/</link>
        <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/14-exercise-02-05/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-05&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AcWing 499&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小 T 是一名质量监督员，最近负责检验一批矿产的质量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这批矿产共有 n 个矿石，从 1 到 n 逐一编号，每个矿石都有自己的重量 w&lt;sub&gt;i&lt;/sub&gt; 以及价值 v&lt;sub&gt;i&lt;/sub&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检验矿产的流程是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给定 m 个区间 [L&lt;sub&gt;i&lt;/sub&gt;，R&lt;sub&gt;i&lt;/sub&gt;]；&lt;/li&gt;
&lt;li&gt;选出一个参数 W；&lt;/li&gt;
&lt;li&gt;对于一个区间 [L&lt;sub&gt;i&lt;/sub&gt;，R&lt;sub&gt;i&lt;/sub&gt;]，计算矿石在这个区间上的检验值 Y&lt;sub&gt;i&lt;/sub&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://yorkfish.github.io/review/review/imgs/blog/exercises/cal_stone.png&#34; alt=&#34;stone&#34;  /&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这批矿产的检验结果 Y 为各个区间的检验值之和。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;即：Y = Y&lt;sub&gt;1&lt;/sub&gt; + Y&lt;sub&gt;2&lt;/sub&gt; + &amp;hellip; + Y&lt;sub&gt;m&lt;/sub&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若这批矿产的检验结果与所给标准值 S 相差太多，就需要再去检验另一批矿产。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小 T 不想费时间去检验另一批矿产，所以他想通过调整参数 W 的值，让检验结果尽可能的靠近标准值 S，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;即，使得 S-Y 的绝对值最小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请你帮忙求出这个最小值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>耍杂技的牛</title>
        <link>https://yorkfish.github.io/review/blog/13-exercise-02-04/</link>
        <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/13-exercise-02-04/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-04&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 125&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;农民约翰的 N 头奶牛（编号为 1&amp;hellip;N）计划逃跑并加入马戏团，为此它们决定练习表演杂技。&lt;/li&gt;
&lt;li&gt;奶牛们不是非常有创意，只提出了一个杂技表演：&lt;/li&gt;
&lt;li&gt;叠罗汉，表演时，奶牛们站在彼此的身上，形成一个高高的垂直堆叠。&lt;/li&gt;
&lt;li&gt;奶牛们正在试图找到自己在这个堆叠中应该所处的位置顺序。&lt;/li&gt;
&lt;li&gt;这 N 头奶牛中的每一头都有着自己的重量 W&lt;sub&gt;i&lt;/sub&gt; 以及自己的强壮程度 S&lt;sub&gt;i&lt;/sub&gt;。&lt;/li&gt;
&lt;li&gt;一头牛支撑不住的可能性取决于它头上所有牛的总重量（不包括它自己）减去它的身体强壮程度的值，&lt;/li&gt;
&lt;li&gt;现在称该数值为风险值，风险值越大，这只牛撑不住的可能性越高。&lt;/li&gt;
&lt;li&gt;您的任务是确定奶牛的排序，使得所有奶牛的风险值中的最大值尽可能的小。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>糖果传递</title>
        <link>https://yorkfish.github.io/review/blog/12-exercise-02-03/</link>
        <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/12-exercise-02-03/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-03&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 122&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;有 n 个小朋友坐成一圈，每人有 a[i] 个糖果。&lt;/li&gt;
&lt;li&gt;每人只能给左右两人传递糖果。&lt;/li&gt;
&lt;li&gt;每人每次传递一个糖果代价为 1。&lt;/li&gt;
&lt;li&gt;求使所有人获得均等糖果的最小代价。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>数独简单版</title>
        <link>https://yorkfish.github.io/review/blog/11-exercise-02-02/</link>
        <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/11-exercise-02-02/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-02&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 1613&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;数独是一种传统益智游戏，你需要把一个 9x9 的数独补充完整，&lt;/li&gt;
&lt;li&gt;使得图中每行、每列、每个 3x3 的九宫格内数字 1~9 均恰好出现一次。&lt;/li&gt;
&lt;li&gt;请编写一个程序填写数独。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>K倍区间</title>
        <link>https://yorkfish.github.io/review/blog/10-exercise-02-01/</link>
        <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/10-exercise-02-01/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-02-01&lt;/li&gt;
&lt;li&gt;ps: 2021-01-31 没有出题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 1230&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;给定一个长度为 &lt;code&gt;N&lt;/code&gt; 的数列，&lt;code&gt;A1&lt;/code&gt;,&lt;code&gt;A2&lt;/code&gt;,&amp;hellip;,&lt;code&gt;AN&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;如果其中一段连续的子序列 &lt;code&gt;Ai&lt;/code&gt;,&lt;code&gt;Ai+1&lt;/code&gt;,&amp;hellip;,&lt;code&gt;Aj&lt;/code&gt; 之和是 &lt;code&gt;K&lt;/code&gt; 的倍数，我们就称这个区间 &lt;code&gt;[i,j]&lt;/code&gt; 是 &lt;code&gt;K&lt;/code&gt; 倍区间。&lt;/li&gt;
&lt;li&gt;你能求出数列中总共有多少个 &lt;code&gt;K&lt;/code&gt; 倍区间吗？&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>牛异或</title>
        <link>https://yorkfish.github.io/review/blog/09-exercise-01-30/</link>
        <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/09-exercise-01-30/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-01-30&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 1414&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;农夫约翰在给他的奶牛们喂食时遇到了一个问题。&lt;/li&gt;
&lt;li&gt;他共有 N 头奶牛，编号 1~N。&lt;/li&gt;
&lt;li&gt;每次喂食前，这 N 头奶牛会按照 1~N 的顺序站成一排。&lt;/li&gt;
&lt;li&gt;此外，每头奶牛都被分配了一个可能不唯一的整数。&lt;/li&gt;
&lt;li&gt;那么所有被分配的整数就形成了一个长度为 N 的整数序列。&lt;/li&gt;
&lt;li&gt;请你在该整数序列中找出一个连续的非空子序列，使得子序列中元素的异或和能够最大。&lt;/li&gt;
&lt;li&gt;如果存在多个这样的序列，那么选择序列末端整数对应的奶牛编号更小的那个序列。&lt;/li&gt;
&lt;li&gt;如果仍然存在多个可选的序列，那么选择长度最短的那个序列。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>加分二叉树</title>
        <link>https://yorkfish.github.io/review/blog/08-exercise-01-29/</link>
        <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/08-exercise-01-29/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-01-29&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 479&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;设一个 n 个节点的二叉树 tree 的中序遍历为 (1,2,3,&amp;hellip;,n)，其中数字 1,2,3,&amp;hellip;,n 为节点编号。&lt;/li&gt;
&lt;li&gt;每个节点都有一个分数（均为正整数），记第 i 个节点的分数为 di，&lt;/li&gt;
&lt;li&gt;tree 及它的每个子树都有一个加分，任一棵子树 subtree（也包含 tree 本身）的加分计算方法如下
&lt;ul&gt;
&lt;li&gt;subtree 的左子树的加分 x subtree 的右子树的加分 + subtree 的根的分数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若某个子树为空，规定其加分为 1。&lt;/li&gt;
&lt;li&gt;叶子的加分就是叶节点本身的分数，不考虑它的空子树。&lt;/li&gt;
&lt;li&gt;试求一棵符合中序遍历为 (1,2,3,&amp;hellip;,n) 且加分最高的二叉树 tree。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>星空之夜</title>
        <link>https://yorkfish.github.io/review/blog/07-exercise-01-28/</link>
        <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/07-exercise-01-28/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;活动时间：2021-01-28&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AcWing 1402&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;夜空深处，闪亮的星星以星群的形式出现在人们眼中，形态万千。&lt;/li&gt;
&lt;li&gt;一个星群是指一组非空的在水平，垂直或对角线方向相邻的星星的集合。&lt;/li&gt;
&lt;li&gt;一个星群不能是一个更大星群的一部分。&lt;/li&gt;
&lt;li&gt;星群可能是相似的。&lt;/li&gt;
&lt;li&gt;如果两个星群的形状、包含星星的数目相同，那么无论它们的朝向如何，都认为它们是相似的。&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>一些 LaTeX 的符号</title>
        <link>https://yorkfish.github.io/review/blog/06-latex/</link>
        <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/06-latex/</guid>
        <description>绝对值：\left| \right| 向下取整：\lfloor x \rfloor 向上取整：\lceil x \rceil 小于等于：\leq 大于等于：\gep 下标：v_i 分数：\frac</description>
      </item>
      
      <item>
        <title>Linux command - time</title>
        <link>https://yorkfish.github.io/review/blog/05-linux-command-time/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/05-linux-command-time/</guid>
        <description>以 C 为例 格式：time + 可执行文件名 结果：除了可执行文件的运行结果，还有 real, user, sys 三个时间可供查看</description>
      </item>
      
      <item>
        <title>Hugo-zdoc 添加图片</title>
        <link>https://yorkfish.github.io/review/blog/04-zdoc-add-image/</link>
        <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/04-zdoc-add-image/</guid>
        <description>&lt;p&gt;有两种方式&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>doc command</title>
        <link>https://yorkfish.github.io/review/blog/03-dos-command/</link>
        <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/03-dos-command/</guid>
        <description>&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;记事本&lt;/li&gt;
&lt;li&gt;CMD 颜色&lt;/li&gt;
&lt;li&gt;文件名含 &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>进制转换</title>
        <link>https://yorkfish.github.io/review/blog/02-binary-decimal-conversion/</link>
        <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/02-binary-decimal-conversion/</guid>
        <description>&lt;h2 id=&#34;1-二进制转十进制&#34;&gt;1. 二进制转十进制&lt;/h2&gt;
&lt;h3 id=&#34;例一-0b10111&#34;&gt;例一 0b101.11&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;整数部分：1 * 2&lt;sup&gt;2&lt;/sup&gt; + 0 * 2&lt;sup&gt;1&lt;/sup&gt; + 1 * 2&lt;sup&gt;0&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;小数部分：1 * 2&lt;sup&gt;-1&lt;/sup&gt; + 1 * 2&lt;sup&gt;-2&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>Usage</title>
        <link>https://yorkfish.github.io/review/blog/01-usage/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/01-usage/</guid>
        <description>&lt;h2 id=&#34;1-拷贝文档&#34;&gt;1. 拷贝文档&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;content&lt;/code&gt; 文件夹下新建 &lt;code&gt;blog&lt;/code&gt; 文件夹&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;root/themes/zdoc/exampleSite/content/en/blog/_index.md&lt;/code&gt; 拷贝过来&lt;/li&gt;
&lt;/ol&gt;</description>
      </item>
      
    
  </channel>
</rss>