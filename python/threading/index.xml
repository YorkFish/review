<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>09 threading on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/python/threading/</link>
    <description>Recent content in 09 threading on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020 - 2021, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 10 Oct 2020 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/python/threading/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>01. preview</title>
        <link>https://yorkfish.github.io/review/python/threading/01-preview/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/01-preview/</guid>
        <description>例一 三个查看状态的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;gt;&amp;gt;&amp;gt; import threading &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; threading.active_count() # 被激活的线程数 1 &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; threading.enumerate() # 列出所有线程 [&amp;lt;_MainThread(MainThread, started 16928)&amp;gt;] &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; threading.current_thread() # 当前使用的线程 &amp;lt;_MainThread(MainThread, started 16928)&amp;gt; &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; threading.current_thread().isAlive()</description>
      </item>
      
      <item>
        <title>02. name and ident</title>
        <link>https://yorkfish.github.io/review/python/threading/02-name-and-ident/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/02-name-and-ident/</guid>
        <description>例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import threading import time def thread_job(): print(&amp;#34;start job\n&amp;#34;) time.sleep(1) print(&amp;#34;finish job\n&amp;#34;) def main(): added_thread = threading.Thread(target=thread_job, name=&amp;#34;T1&amp;#34;) print(f&amp;#34;{added_thread.name=}, {added_thread.ident=}&amp;#34;) added_thread.start() print(f&amp;#34;{added_thread.name=}, {added_thread.ident=}&amp;#34;) added_thread.join() print(&amp;#34;all done\n&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: main() &amp;gt;&amp;gt;&amp;gt; added_thread.name=&#39;T1&#39;, added_thread.ident=None start job added_thread.name=&#39;T1&#39;, added_thread.ident=17000 finish job all done 说明 name: 线程名</description>
      </item>
      
      <item>
        <title>03. without setting</title>
        <link>https://yorkfish.github.io/review/python/threading/03-without-setting/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/03-without-setting/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import threading import time def thread_job(): print(&amp;#34;start job\n&amp;#34;) time.sleep(1) print(&amp;#34;finish job\n&amp;#34;) def main(): added_thread = threading.Thread(target=thread_job) added_thread.start() print(&amp;#34;all done\n&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: main() &amp;gt;&amp;gt;&amp;gt; start job all done finish job 说明 与 C 略有不同 main thread_job | | ------&amp;gt; | | over | &amp;quot;main&amp;quot; 已经</description>
      </item>
      
      <item>
        <title>04. daemon</title>
        <link>https://yorkfish.github.io/review/python/threading/04-daemon/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/04-daemon/</guid>
        <description>主线程结束，不想等待子线程，可以设置守护主线程 目标示意图 main thread_job | | ------&amp;gt; | X over &amp;quot;main&amp;quot; 结束后，子线程也跟着结束 方式一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
      </item>
      
      <item>
        <title>05. join</title>
        <link>https://yorkfish.github.io/review/python/threading/05-join/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/05-join/</guid>
        <description>希望在子线程结束后，再结束主线程 目标示意图 main thread_job | | ------&amp;gt; | | &amp;lt;------ | over 例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import threading import time def thread_job(): print(&amp;#34;start job\n&amp;#34;) time.sleep(1) print(&amp;#34;finish job\n&amp;#34;) def main(): added_thread = threading.Thread(target=thread_job) added_thread.start() added_thread.join() #</description>
      </item>
      
      <item>
        <title>06. transfer parameters</title>
        <link>https://yorkfish.github.io/review/python/threading/06-transfer-parameters/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/06-transfer-parameters/</guid>
        <description>例一 args 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import threading import time from queue import Queue def job(lst, q): for i in range(len(lst)): lst[i] = lst[i] ** 2 q.put(lst) def multi_threading(data): q = Queue() threads = [] length = len(data) for i in range(length): t</description>
      </item>
      
      <item>
        <title>07. lock</title>
        <link>https://yorkfish.github.io/review/python/threading/07-lock/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/07-lock/</guid>
        <description>例一 未加锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import threading def test_count(): global count for _ in range(10_0000): count += 1 if __name__ == &amp;#34;__main__&amp;#34;: count = 0 threads = [] for _ in range(10): t = threading.Thread(target=test_count) t.start() threads.append(t) for t in threads: t.join() print(count) # 应该是 10 * 100000 =</description>
      </item>
      
      <item>
        <title>08. semaphore</title>
        <link>https://yorkfish.github.io/review/python/threading/08-semaphore/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/08-semaphore/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import threading import time semaphore = threading.Semaphore(3) # 最多 3 个线程同时使用资源 def func(): if semaphore.acquire(): for _ in range(5): print(threading.currentThread().getName(), &amp;#34;get semaphore&amp;#34;) time.sleep(5) semaphore.release() print(threading.currentThread().getName(), &amp;#34;release semaphore&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: for _ in range(8): t1 = threading.Thread(target=func) t1.start() &amp;gt;&amp;gt;&amp;gt; Thread-1</description>
      </item>
      
      <item>
        <title>09. Timer</title>
        <link>https://yorkfish.github.io/review/python/threading/09-timer/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/09-timer/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import threading import time def func(): print(&amp;#34;I am running.&amp;#34;) time.sleep(4) print(&amp;#34;I am done.&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: t = threading.Timer(6, func) # 6s 后执行 func t.start() i = 0 while True: print(i, &amp;#34;==========&amp;#34;) i += 1 time.sleep(3) &amp;gt;&amp;gt;&amp;gt; 0 ========== 1 ========== 2 ========== I am running. 3</description>
      </item>
      
      <item>
        <title>10. supplement</title>
        <link>https://yorkfish.github.io/review/python/threading/10-supplement/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/10-supplement/</guid>
        <description>1. threading 之前的版本 Python2 用的是 thread，Python3 将其改为 _thread 现在很少使用 _thread，不过认识一下也没坏处 例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
      </item>
      
    
  </channel>
</rss>