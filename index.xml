<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YorkFish on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/</link>
    <description>Recent content in YorkFish on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 28 Aug 2020 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>01 位运算简介</title>
        <link>https://yorkfish.github.io/review/c/bit/01_overview/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/bit/01_overview/</guid>
        <description>1. 与 &amp;amp; 若参加与运算的是负数，则以补码形式表示二进制，然后“按位与” 作用 清零 取出数中指定位 保留数中指定位 2. 或 | 对一个数据的某些位定值为 1 3. 异或</description>
      </item>
      
      <item>
        <title>01. 不带参宏定义</title>
        <link>https://yorkfish.github.io/review/c/preprocessor/01_with_no_arguments/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/preprocessor/01_with_no_arguments/</guid>
        <description>1. 一般形式 #define 标识符 字符串 如 #define PI 3.1415926 2. 一些约定 宏名一般习惯用大写字母表示 宏定义是用宏名代替一个字符串，也就是作简单的置换，不作正确性检查 宏定义不</description>
      </item>
      
      <item>
        <title>01. 函数概述</title>
        <link>https://yorkfish.github.io/review/c/function/01_overview/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/01_overview/</guid>
        <description>1. 简介 一个 C 程序由一个或多个程序模块组成 每个程序模块作为一个源程序文件 一个源程序文件由一个或多个函数以及其他有关内容（如命令行、数据定义等）</description>
      </item>
      
      <item>
        <title>01. 指针概述</title>
        <link>https://yorkfish.github.io/review/c/pointer/01_overview/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/01_overview/</guid>
        <description>1. 优势 正确而灵活地运用指针，可以 有效地表示复杂的数据结构 动态分配内存 方便地使用字符串 有效而方便地使用数组 调用函数时，获得一个以上的结果 直接处</description>
      </item>
      
      <item>
        <title>01. 数据类型</title>
        <link>https://yorkfish.github.io/review/c/basics/01_data_type/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/01_data_type/</guid>
        <description>1. 分类 基本类型 构造类型 指针类型 空类型 2. 常用的基本类型 类型名 写法 缩写 短整型 short int short 整型 int / 长整型 long int long 长整型 long long int long long 一般 sizeof(short) &amp;lt; sizeof(long) sizeof(short) &amp;lt;= sizeof(int) 或 sizeof(int) &amp;lt;= sizeof(long)</description>
      </item>
      
      <item>
        <title>01. 文件概述</title>
        <link>https://yorkfish.github.io/review/c/file/01_overview/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/01_overview/</guid>
        <description>1. 简介 每个被使用的文件都在内存中开辟一个区，用来存放文件的有关信息 这些信息是保存在一个结构体变量中的 该结构体类型是由系统定义的，取名为 FILE 2. stdio.h</description>
      </item>
      
      <item>
        <title>01. 结构体概述</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/01_overview_of_struct/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/01_overview_of_struct/</guid>
        <description>一般声明形式 struct 结构体名 { 成员列表 }; 举例 1 2 3 4 5 6 7 8 struct student { char name[20]; char addr[30]; char gender; int age; int num; float score; }; ps 不要忽略最后的分号 “结构体名”用作结构体类型的标志，</description>
      </item>
      
      <item>
        <title>Quick start</title>
        <link>https://yorkfish.github.io/review/hugo/hugo_01/</link>
        <pubDate>Sun, 23 Aug 2020 00:30:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/hugo_01/</guid>
        <description>1. 官方文档 Hugo_quick-start: &amp;gt; 传送门 zdoc_theme: &amp;gt; 传送门 zdoc_quickstart: &amp;gt; 传送门 2. 初始化 假设本地站点名为 hugoblog 方法一 D:\&amp;gt;hugo new site hugoblog 方法二 新建文件夹 hugoblog D:\hugoblog&amp;gt;hugo new site . 3. 添加主题 方法一 打开网页：http</description>
      </item>
      
      <item>
        <title>02. fopen() &amp; fclose()</title>
        <link>https://yorkfish.github.io/review/c/file/02_fopen_and_fclose/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/02_fopen_and_fclose/</guid>
        <description>1. 打开文件 fopen 一般形式 FILE * fp; fp = fopen(&amp;quot;filename&amp;quot;, &amp;quot;usemode&amp;quot;); 打开模式 文件使用方式 含义 &amp;quot;r&amp;quot; 读，打开 &amp;quot;w&amp;quot; 写，打开 &amp;quot;a&amp;quot; 追加，打开 &amp;quot;rb&amp;quot; 读，二进制打开 &amp;quot;wb&amp;quot; 写，二进制打开 &amp;quot;ab&amp;quot; 追加，二进制打开</description>
      </item>
      
      <item>
        <title>02. 举例</title>
        <link>https://yorkfish.github.io/review/c/bit/02_examples/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/bit/02_examples/</guid>
        <description>例一 取某几位数 求整数 a 右端的 4~7 位 原码：xxxx ... xxxx xxxx 位数：xxxx ... 7654 3210 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; int main() { short a = 666; // 0b0000 0010 1001 1010 short b = (a&amp;gt;&amp;gt;4) &amp;amp; ~(~0 &amp;lt;&amp;lt;</description>
      </item>
      
      <item>
        <title>02. 函数定义</title>
        <link>https://yorkfish.github.io/review/c/function/02_general_form/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/02_general_form/</guid>
        <description>1. 默认类型 如果在定义函数时不指定函数类型，系统会隐含指定函数类型为 int 不推荐这样做 2. 空函数 形式 1 2 void dummy() { } 调用此函数时，什么工作也不做，没有任</description>
      </item>
      
      <item>
        <title>02. 带参宏定义</title>
        <link>https://yorkfish.github.io/review/c/preprocessor/02_with_parameters/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/preprocessor/02_with_parameters/</guid>
        <description>1. 一般形式 #define 宏名(参数表) 字符串 如 定义：#define S(a,b) a*b 使用：area = S(3, 2); // 矩形边长 2. 两个注意点 坑一 1 2 3 4 5 6 7 8 9 10 #include &amp;lt;stdio.h&amp;gt; #define S(a,b) a*b int main() {</description>
      </item>
      
      <item>
        <title>02. 指针的定义与使用</title>
        <link>https://yorkfish.github.io/review/c/pointer/02_definition_and_use_of_pointer/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/02_definition_and_use_of_pointer/</guid>
        <description>1. 定义 1 2 3 int i; int * pointer_1; pointer_1 = &amp;amp;i; 将变量 i 的地址存放到指针变量 pointer_1 中，pointer_1 “指向”了变量 i 指针变量中只能存放地址（指针） 2. 两个运算符 &amp;amp;:</description>
      </item>
      
      <item>
        <title>02. 标识符长度</title>
        <link>https://yorkfish.github.io/review/c/basics/02_length_of_identifier/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/02_length_of_identifier/</guid>
        <description>ANSI C 标准没有规定标识符的长度（字符个数） C 标准建议至少应能识别 31 个字符 若两个标识符很长，但不同之处在头部的可识别范围内，则编译器可辨别</description>
      </item>
      
      <item>
        <title>Configuration</title>
        <link>https://yorkfish.github.io/review/hugo/hugo_02/</link>
        <pubDate>Sun, 23 Aug 2020 00:30:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/hugo_02/</guid>
        <description>1. 更换配置文件 删除博客根目录的 config.toml 复制 D:\hugoblog\themes\zdoc\exampleSite 的 4 个文件夹到博客根目录 ps 不复制，按照主题的说明文档依次新建也行 2. 部分结构 新的配置文件路径 D:hugoblog\config\_default 文件结构 root</description>
      </item>
      
      <item>
        <title>02. 定义方法</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/02_define/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/02_define/</guid>
        <description>1. 先声明，再定义 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; struct student { char name[20]; char gender; int num; }; int main() { struct student st1; return 0; } 2. 声明的同时定义 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;stdio.h&amp;gt; struct student { char name[20]; char</description>
      </item>
      
      <item>
        <title>03. fgetc() &amp; fputc()</title>
        <link>https://yorkfish.github.io/review/c/file/03_fgetc_and_fputc/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/03_fgetc_and_fputc/</guid>
        <description>1. fgetc 简介 从指定的文件读入一个字符，该文件必须是以读或写方式打开的 一般形式 char ch = fgetc(fp); // fp 为文件型指针变量 说明 如果在执行 fgetc 函数读字符时遇到文件结束</description>
      </item>
      
      <item>
        <title>03. typedef</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/03_typedef/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/03_typedef/</guid>
        <description>1. 作用 声明新的类型名，代替已有的类型名 2. 简介 用 typedef 可以声明各种类型名，但不能用来定义变量 #define 是在预编译时处理的，它只能作简单的字符串替换 typedef 是在编</description>
      </item>
      
      <item>
        <title>03. 一维数组与指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/03_arrays_and_pointers-1/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/03_arrays_and_pointers-1/</guid>
        <description>1. 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;stdio.h&amp;gt; int main() { int arr1[4] = {1, 2, 3, 4}; int arr2[] = {1, 2, 3, 4}; int* p1 = arr1; int* p2 = &amp;amp;arr1[0]; int arr3[5] = {0}; // 0, 0, 0, 0, 0 int arr4[5] = {1, 2, 3}; // 1, 2, 3, 0, 0 // c99,</description>
      </item>
      
      <item>
        <title>03. 位段</title>
        <link>https://yorkfish.github.io/review/c/bit/03_bit_field/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/bit/03_bit_field/</guid>
        <description>1. 简介 C 语言允许在结构体中以位为单位，来指定其成员所占内存长度 这种以位为单位的成员称为“位段”或“位域” bit field 利用位段能够利用较少的位数存储数</description>
      </item>
      
      <item>
        <title>03. 函数的参数与返回值</title>
        <link>https://yorkfish.github.io/review/c/function/03_params_and_ret_values/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/03_params_and_ret_values/</guid>
        <description>1. 形参 形参，在未出现函数调用时，它们并不占内存中的存储单元 只有在发生函数调用时，形参才被分配内存单元 在调用结束后，形参所占的内存空间也被释放</description>
      </item>
      
      <item>
        <title>03. 导入</title>
        <link>https://yorkfish.github.io/review/c/preprocessor/03_include/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/preprocessor/03_include/</guid>
        <description>1. 前提 .h + .c 2. 编译 在编译时并不是对两个文件分别进行编译，然后再将它们的目标程序连接的 而是在经过编译预处理后将头文件 .h 包含到主文件中，得到一个</description>
      </item>
      
      <item>
        <title>03. 数值的表示</title>
        <link>https://yorkfish.github.io/review/c/basics/03_representation_of_value/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/03_representation_of_value/</guid>
        <description>1. 补码 数值是以补码形式存储的 正数：原码 = 反码 = 补码 负数 反码：原码除符号位，按位取反 补码：原码除符号位，按位取反再加 1 2. unsigned int 一个整数常量后面加</description>
      </item>
      
      <item>
        <title>Make doc</title>
        <link>https://yorkfish.github.io/review/hugo/hugo_03/</link>
        <pubDate>Sun, 23 Aug 2020 00:30:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/hugo_03/</guid>
        <description>Step1 删除 D:hugoblog\content&amp;gt; 下的文件夹 ko, en 新建 _index.md，并写入如下语句 --- title: ZDoc description: Hugo ZDoc theme landing page date: 2020-08-28T00:00:00+08:00 draft: false landing: height: 500 image: favicon/android-icon-192x192.png title: - YorkFish&#39;s Blog text: - Knowledge review titleColor: textColor: spaceBetweenTitleText: 25 buttons: - link: hugo/hugo_01 text: GET STARTED color: primary ---</description>
      </item>
      
      <item>
        <title>04. fread() &amp; fwrite()</title>
        <link>https://yorkfish.github.io/review/c/file/04_fread_and_fwrite/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/04_fread_and_fwrite/</guid>
        <description>1. 简介 fread 和 fwrite 函数可以用来读写一个字符 因为常常需要一次读取一组数据，ANSI C 标准提出设置这两个函数，用来读写一个数据块 2. 一般形式 1 2 fread(buffer, size, count, fp);</description>
      </item>
      
      <item>
        <title>04. 函数的调用</title>
        <link>https://yorkfish.github.io/review/c/function/04_function_call/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/04_function_call/</guid>
        <description>1. 多个实参的求值顺序 有的编译器自右向左 有的编译器自左向右 应当避免这种容易混淆的用法 2. 编译器的检查 只检查参数个数和参数类型，而不检查参数名 对形</description>
      </item>
      
      <item>
        <title>04. 多维数组与指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/04_arrays_and_pointers-2/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/04_arrays_and_pointers-2/</guid>
        <description>1. 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int arr1[3][4] = { {10, 11, 12, 13}, {14, 15, 16, 17}, {18, 19, 20, 21}}; int arr2[][4] = { {10, 11, 12, 13}, {14, 15, 16, 17}, {18, 19, 20, 21}}; int arr3[][4] = { {10}, {14, 15}, {18, 19, 20}}; Tip: 指针尽量用 p[i] 的形式，</description>
      </item>
      
      <item>
        <title>04. 字符型数据</title>
        <link>https://yorkfish.github.io/review/c/basics/04_character_data/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/04_character_data/</guid>
        <description>1. 换行与回车 \n 换行 \r 回车 ps 以前的打字机，打满一行字后，先把纸往上卷（换行），再把纸往右拉（回车） 2. 八进制 八进制 十进制 ASCII \101 65 &#39;A&#39; 3. 字符与字符串 &#39;a&#39;</description>
      </item>
      
      <item>
        <title>04. 条件编译</title>
        <link>https://yorkfish.github.io/review/c/preprocessor/04_conditional_compilation/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/preprocessor/04_conditional_compilation/</guid>
        <description>1. 优点 采用条件编译，可以减少被编译的语句，从而减少目标程序的长度，减少运行时间 2. 三种形式 形式一 1 2 3 #ifdef 标识符 // 程序段1 #endif 形式二 1 2 3 4 5 #ifdef 标</description>
      </item>
      
      <item>
        <title>04. 结构体变量的使用</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/04_usage/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/04_usage/</guid>
        <description>1. 引用的方式 一般形式 结构体变量名.成员名 如：student1.num = 10010; . 是成员（分量）运算符，它在所有的运算符中优先级最高的 举例 1 2 3 4 5</description>
      </item>
      
      <item>
        <title>Deploy to the cloud</title>
        <link>https://yorkfish.github.io/review/hugo/hugo_04/</link>
        <pubDate>Sun, 23 Aug 2020 00:30:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/hugo_04/</guid>
        <description>1. bulid D:\hugoblog&amp;gt;hugo --buildDrafts 上方命令会在博客根目录生成一个名为 public 的文件夹，里面是 hugo 生成的网页文件 ps Hugo 与 MkDocs 不同 生成静态网页后，需要开启服务才有效果 在本地双击 index.html 能打</description>
      </item>
      
      <item>
        <title>05. fscanf() &amp; fprintf()</title>
        <link>https://yorkfish.github.io/review/c/file/05_fscanf_and_fprintf/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/05_fscanf_and_fprintf/</guid>
        <description>1. 简介 与 scanf() 和 printf() 作用相仿 都是格式化读写函数 2. 一般调用方式 fscanf(文件指针, 格式字符串, 输出表列); fprintf(文件指针, 格式字符串,</description>
      </item>
      
      <item>
        <title>05. 二维数组传参</title>
        <link>https://yorkfish.github.io/review/c/pointer/05_array_param_transfer/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/05_array_param_transfer/</guid>
        <description>例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include &amp;lt;stdio.h&amp;gt; void traverseArray(int (*arr)[5], int arrSize, int arrColSize){ for (int i = 0; i &amp;lt; arrSize; i++) { for (int j = 0; j &amp;lt; arrColSize; j++) { printf(&amp;#34;%d &amp;#34;, arr[i][j]); } printf(&amp;#34;\n&amp;#34;); } } int main() { int nums[][5] = { {11, 12,</description>
      </item>
      
      <item>
        <title>05. 优先级</title>
        <link>https://yorkfish.github.io/review/c/basics/05_priority/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/05_priority/</guid>
        <description>1. 常见的情况 ! &amp;gt; 算术 &amp;gt; 关系 &amp;gt; 逻辑 &amp;gt; 赋值 &amp;gt; 逗号 算术：*, /, %, +, - 关系：&amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=, !=, == 逻辑：&amp;amp;&amp;amp;, || 赋值：= 及其扩展（如 +</description>
      </item>
      
      <item>
        <title>05. 全局变量与局部变量</title>
        <link>https://yorkfish.github.io/review/c/function/05_global_var_and_local_var/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/05_global_var_and_local_var/</guid>
        <description>1. 全局变量 全局变量“管”的是它定义之下的语句 不在必要时，不要使用全局变量 全局变量使用过多，会降低程序的清晰性 2. 局部变量 在同一个源文件中，若外</description>
      </item>
      
      <item>
        <title>05. 结构体数组</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/05_struct_array/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/05_struct_array/</guid>
        <description>1. 定义 例一 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; typedef struct student { char name[20]; char gender; int num; } Student; int main() { Student stu[3]; return 0; } 例二 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;stdio.h&amp;gt; struct student { char name[20]; char gender; int</description>
      </item>
      
      <item>
        <title>Shortcodes</title>
        <link>https://yorkfish.github.io/review/hugo/shortcodes/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/shortcodes/</guid>
        <description>1. alert {{&amp;lt; alert theme=&amp;quot;warning&amp;quot; &amp;gt;}} # warning, success, info, danger **this** is a text {{&amp;lt; /alert &amp;gt;}} this is &amp;ldquo;warning&amp;rdquo; this is &amp;ldquo;success&amp;rdquo; this is &amp;ldquo;info&amp;rdquo; this is &amp;ldquo;danger&amp;rdquo; 2. expand {{&amp;lt; expand &amp;quot;Expand me&amp;quot; &amp;gt;}} Some Markdown Contents {{&amp;lt; /expand &amp;gt;}} Expand me Some Markdown Contents 3. notice {{&amp;lt; notice success &amp;quot;This is title&amp;quot; &amp;gt;}} # success, info, warning, error success {{&amp;lt; /notice &amp;gt;}} success info warning error</description>
      </item>
      
      <item>
        <title>06. getw() &amp; putw()</title>
        <link>https://yorkfish.github.io/review/c/file/06_getw_and_putw/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/06_getw_and_putw/</guid>
        <description>1. 简介 大多数 C 编译系统都提供 getw 和 putw 用来对磁盘文件读写一个字（整数） 2. 举例 例一 使用自带的函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include &amp;lt;stdio.h&amp;gt; int main() { FILE* fp = fopen(&amp;#34;test.txt&amp;#34;, &amp;#34;w&amp;#34;); putw(10,</description>
      </item>
      
      <item>
        <title>06. 变量的存储类别</title>
        <link>https://yorkfish.github.io/review/c/function/06_storage_category_of_var/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/06_storage_category_of_var/</guid>
        <description>1. 两种角度 从变量的作用域（空间）角度来分 全局变量 局部变量 从变量值存在的时间（生存期）角度来分 静态存储方式 动态存储方式 2. 结构 用户区 ----------- | 程序区 |</description>
      </item>
      
      <item>
        <title>06. 四则运算</title>
        <link>https://yorkfish.github.io/review/c/basics/06_arithmetic/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/06_arithmetic/</guid>
        <description>1. 除法 如果除数或被除数中有一个为负值，则舍入的方向是不固定的 如 -5/3 有的系统：-1 （取整后向零靠拢） 有的系统：-2 C 一般是“取整后向零靠拢” Python 一</description>
      </item>
      
      <item>
        <title>06. 字符串与指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/06_strings_and_pointers/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/06_strings_and_pointers/</guid>
        <description>1. 字符数组和字符指针变量 字符数组：只能单个更改 字符指针：只能整体更改 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; int main() { char str1[] = &amp;#34;york&amp;#34;; str1[0] = &amp;#39;Y&amp;#39;; printf(&amp;#34;%s\n&amp;#34;, str1); char* str2 = &amp;#34;fish&amp;#34;; str2 = &amp;#34;Fish&amp;#34;; printf(&amp;#34;%s\n&amp;#34;, str2);</description>
      </item>
      
      <item>
        <title>06. 结构体类型的大小</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/06_sizeof_struct/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/06_sizeof_struct/</guid>
        <description>并不是简单地累加成员变量占用的大小 举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include &amp;lt;stdio.h&amp;gt; struct test1 { char gender; }; struct test2 { char gender; int num;</description>
      </item>
      
      <item>
        <title>06. 链表</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/06_linked_list/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/06_linked_list/</guid>
        <description>1. 简介 链表可以根据需要开辟内存单元 链表有一个“头指针”变量 它存放一个地址 该地址指向一个元素 链表中每一个元素称为“结点” 每个结点都应包括两个部</description>
      </item>
      
      <item>
        <title>07. auto</title>
        <link>https://yorkfish.github.io/review/c/function/07_auto/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/07_auto/</guid>
        <description>1. 关键字 auto 2. 说明 “自动变量”是函数中的局部变量 关键字可以省略，若省略，则隐含确定为“自动存储类别” 属于动态存储方式，数据存储在动态存储区中 如</description>
      </item>
      
      <item>
        <title>07. fgets() &amp; fputs()</title>
        <link>https://yorkfish.github.io/review/c/file/07_fgets_and_fputs/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/07_fgets_and_fputs/</guid>
        <description>1. 简介 fgets: 从指定文件读取一个字符串 fputs: 向指定文件写进一个字符串 2. 举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include &amp;lt;stdio.h&amp;gt; int main() { FILE* fp = fopen(&amp;#34;test.txt&amp;#34;, &amp;#34;w&amp;#34;); fputs(&amp;#34;China&amp;#34;, fp); // 把字符串 &amp;#34;China&amp;#34; 输出到 fp 指</description>
      </item>
      
      <item>
        <title>07. 共用体概述</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/07_overview_of_union/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/07_overview_of_union/</guid>
        <description>1. 一般定义形式 union 共用体 { 成员表列 } 变量表列; 2. 说明 使几种不同的变量共占同一段内存的结构，称为“共用体” 共用体与结构体的定义形式相似，但它们的</description>
      </item>
      
      <item>
        <title>07. 指针数组和指针的指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/07_pointer_array_and_pointer_to_pointer/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/07_pointer_array_and_pointer_to_pointer/</guid>
        <description>1. 指针数组的概念 一般定义形式 类型名 * 数组名[数组长度]; 如：int * p[4]; ps [] 比 * 优先级高 字符串比较应当用 strcmp 函数 2. 指向指针的指针 举例 1 2 3 4 5 6</description>
      </item>
      
      <item>
        <title>07. 结合方向</title>
        <link>https://yorkfish.github.io/review/c/basics/07_combination_direction/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/07_combination_direction/</guid>
        <description>不推荐下文例子中的写法 1. 右结合性 即“自右向左”结合 例一 如 -i++ &amp;gt; -(i++) 1 2 3 4 5 6 7 8 9 #include &amp;lt;stdio.h&amp;gt; int main() { int i = 10; printf(&amp;#34;%d\n&amp;#34;, -i++); // -10 printf(&amp;#34;%d\n&amp;#34;, i); // 11 return 0; } “负号”与 ++ 同级，默</description>
      </item>
      
      <item>
        <title>08. rewind, fseek, ftell</title>
        <link>https://yorkfish.github.io/review/c/file/08_rewind-fseek-ftell/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/08_rewind-fseek-ftell/</guid>
        <description>1. rewind 简介 使位置指针重新返回文件的开头 此函数没有返回值 作用 文件的位置指针重新定位于开头 feof 的值恢复为 0（假） 2. fseek 简介 对流式文件可以进行顺序读写，</description>
      </item>
      
      <item>
        <title>08. static</title>
        <link>https://yorkfish.github.io/review/c/function/08_static/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/08_static/</guid>
        <description>1. 关键字 static 2. 说明 若希望函数中的局部变量在函数调用结束后继续存在，即其占用的存储单元不释放，需要用到静态局部变量 若之前调用过静态局部变量，则使</description>
      </item>
      
      <item>
        <title>08. 共用体的特点与使用</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/08_characteristics_of_union/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/08_characteristics_of_union/</guid>
        <description>1. 说明 每一瞬时，只有一个成员起作用 共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后，原有的成员就失效 共用体变量的地址和它的</description>
      </item>
      
      <item>
        <title>08. 动态分配内存与释放</title>
        <link>https://yorkfish.github.io/review/c/pointer/08_malloc_calloc_realloc_free/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/08_malloc_calloc_realloc_free/</guid>
        <description>1. malloc 函数原型 void * malloc(unsigned int size); 作用 在内存的动态存储区中分配一个长度为 size 的连续空间 此函数的值（即返回值），是一个分配域的起始地址，类型为 void 如果此函数未</description>
      </item>
      
      <item>
        <title>08. 输出格式</title>
        <link>https://yorkfish.github.io/review/c/basics/08_format/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/08_format/</guid>
        <description>常用格式 符号 释义 %o 八进制整型数 %d 十进制整型数，%i 也行 %Ld 十进制长整型数 %u 无符号整型数 %Lu 无符号长整型数 %x 十六进制整型数 %mc 字符占 m 个宽度，右对齐</description>
      </item>
      
      <item>
        <title>09. ferror() &amp; clearerr()</title>
        <link>https://yorkfish.github.io/review/c/file/09_ferror_and_clearerr/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/09_ferror_and_clearerr/</guid>
        <description>1. ferror 简介 除了在 getc, putc, fread, fwrite 等函数出错时有用 还可以主动使用以检查 一般形式 ferror(fp); 说明 若返回值为 0，表示未出错 若返回一个非零值，表示出错 同一个文件每次调用</description>
      </item>
      
      <item>
        <title>09. goto</title>
        <link>https://yorkfish.github.io/review/c/basics/09_goto/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/09_goto/</guid>
        <description>无条件转向语句 1. 形式 goto 语句标号; 语句标号：用标识符表示，命名规则与标识符相同（字母、数字、下划线，不用数字开头） 如：goto label_1; 2. 使用 一般不用</description>
      </item>
      
      <item>
        <title>09. register</title>
        <link>https://yorkfish.github.io/review/c/function/09_register/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/09_register/</guid>
        <description>1. 结论 实际上，用 register 声明变量是不必要的 如今优化的编译系统能够识别频繁的变量，从而自动地将这些变量放在寄存器中 2. 了解 由于对寄存器的存取速度远高于</description>
      </item>
      
      <item>
        <title>09. 小结</title>
        <link>https://yorkfish.github.io/review/c/pointer/09_summary/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/09_summary/</guid>
        <description>1. 常见的数据类型 定义 含义 int i 定义整型变量 int * p p 为指向整型数据的指针变量 int a[n] 定义整型数组 a，它有 n 个元素 int * p[n] 定义指针数组 p，它由 n 个指向整</description>
      </item>
      
      <item>
        <title>09. 枚举</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/09_enum/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/09_enum/</guid>
        <description>1. 使用场景 如果一个变量只有几种可能的值，则可以定义为枚举类型 变量的值只限于列举出来的值的范围 2. 一般定义形式 enum weekday {sun, mon, tue, wed, thu, fri, sat}; 3. 用法 例一 C 编译</description>
      </item>
      
      <item>
        <title>10. extern</title>
        <link>https://yorkfish.github.io/review/c/function/10_extern/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/10_extern/</guid>
        <description>1. 声明外部变量 一般的做法：将外部变量的定义放在引用它的所有函数之前 类型名可写可不写 写：extern int A, B; 不写：extern A, B;，会有 warning 2. 编</description>
      </item>
      
      <item>
        <title>10. scanf</title>
        <link>https://yorkfish.github.io/review/c/basics/10_scanf/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/10_scanf/</guid>
        <description>1. 说明 若格式中有两个空格，应对应给到两个或更多的空格 输入数据时，遇到以下情况，认为结束 遇空格、回车、跳格键 超过指定宽度 非法输入 2. 举例 例一 因空</description>
      </item>
      
      <item>
        <title>10. 小结</title>
        <link>https://yorkfish.github.io/review/c/file/10_summary/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/10_summary/</guid>
        <description>分类 函数名 功能 打开文件 fopen() 打开文件 关闭文件 fclose() 关闭文件 文件定位 fseek() 改变文件位置指针的位置 rewind() 使文件位置指针重新至于文件开头 ftell() 返回文件位置指针的当前值</description>
      </item>
      
      <item>
        <title>11. getchar() &amp; putchar()</title>
        <link>https://yorkfish.github.io/review/c/basics/11_getchar_and_putchar/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/11_getchar_and_putchar/</guid>
        <description>1. getchar() 说明 字符输入函数 从终端或系统隐含指定的输入设备，输入一个字符 举例 1 2 3 4 5 6 7 8 9 #include &amp;lt;stdio.h&amp;gt; int main() { char c; c = getchar(); printf(&amp;#34;%c\n&amp;#34;, c); return 0; } Input: y Output: y 2. putchar() 说明 字符输出</description>
      </item>
      
      <item>
        <title>11. 变量的声明与定义</title>
        <link>https://yorkfish.github.io/review/c/function/11_declaration_and_definition/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/11_declaration_and_definition/</guid>
        <description>1. 简介 组成 一个函数一般由两部分组成 声明部分 执行语句 声明与定义 函数的声明是函数的原型 函数的定义是函数的本身 int a; 既是声明，也是定义 extern a; 是声明，但</description>
      </item>
      
      <item>
        <title>12. gets() &amp; puts()</title>
        <link>https://yorkfish.github.io/review/c/basics/12_gets_and_puts/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/12_gets_and_puts/</guid>
        <description>1. gets(字符数组) 说明 只针对一个字符串 从终端输入一个字符串到字符数组，并得到一个函数值 该函数值是字符数组的起始地址 举例 1 2 3 4 5 6 7 8 9</description>
      </item>
      
      <item>
        <title>12. 内部函数和外部函数</title>
        <link>https://yorkfish.github.io/review/c/function/12_internal_and_external_functions/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/12_internal_and_external_functions/</guid>
        <description>1. 内部函数 如果一个函数只能被本文件中其他函数所调用，它称为内部函数 在定义内部函数时，在函数名和函数类型的前面加 static，即 static 类型标识符 函</description>
      </item>
      
      <item>
        <title>13. strcat()</title>
        <link>https://yorkfish.github.io/review/c/basics/13_strcat/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/13_strcat/</guid>
        <description>strcat(字符数组1, 字符数组2) 简介 string catenate 把“字符串2”接到“字符串1”的后面 使用 1 2 3 4 5 6 7 8 9 10 11 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; int main() { char str1[] = &amp;#34;abcde&amp;#34;; char str2[] = &amp;#34;123&amp;#34;; strcpy(str1, str2);</description>
      </item>
      
      <item>
        <title>14. strcpy() &amp; strncpy()</title>
        <link>https://yorkfish.github.io/review/c/basics/14_strcpy_and_strncpy/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/14_strcpy_and_strncpy/</guid>
        <description>1. strcpy(字符数组1, 字符串2) 简介 string copy 字符串赋值函数 将“字符串2”复制到“字符数组1”中去 注意事项 “字符数组1”必须定义得足够大，以</description>
      </item>
      
      <item>
        <title>15. strcmp()</title>
        <link>https://yorkfish.github.io/review/c/basics/15_strcmp/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/15_strcmp/</guid>
        <description>strcmp(字符串1, 字符串2) 简介 string compare 比较“字符串1”与“字符串2” 比较规则 若出现不同字符，以第一个不相同的字符的比较结果为准 str1 == str2 返回</description>
      </item>
      
      <item>
        <title>16. strlen()</title>
        <link>https://yorkfish.github.io/review/c/basics/16_strlen/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/16_strlen/</guid>
        <description>strlen(字符数组) 简介 string length 测试字符串长度 注意事项 函数的值位字符串的实际长度，不包括 &#39;\0&#39; 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; int main() { char str1[] = &amp;#34;york&amp;#34;;</description>
      </item>
      
      <item>
        <title>17. strlwr() &amp; strupr()</title>
        <link>https://yorkfish.github.io/review/c/basics/17_strlwr_and_strupr/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/17_strlwr_and_strupr/</guid>
        <description>1. strlwr(字符串) string lowercase 将字符串中的大写字母换成小写字母 2. strupr(字符车) string uppercase 将字符串中的小写字母换成大写字母 3. 使用 1 2 3 4 5 6 7</description>
      </item>
      
      <item>
        <title>Usage</title>
        <link>https://yorkfish.github.io/review/blog/01_usage/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/01_usage/</guid>
        <description>&lt;h2 id=&#34;1-拷贝文档&#34;&gt;1. 拷贝文档&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;content&lt;/code&gt; 文件夹下新建 &lt;code&gt;blog&lt;/code&gt; 文件夹&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;root/themes/zdoc/exampleSite/content/en/blog/_index.md&lt;/code&gt; 拷贝过来&lt;/li&gt;
&lt;/ol&gt;</description>
      </item>
      
      <item>
        <title>进制转换</title>
        <link>https://yorkfish.github.io/review/blog/02_binary-decimal_conversion/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/02_binary-decimal_conversion/</guid>
        <description>&lt;h2 id=&#34;1-二进制转十进制&#34;&gt;1. 二进制转十进制&lt;/h2&gt;
&lt;h3 id=&#34;例一-0b10111&#34;&gt;例一 0b101.11&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;整数部分：1 * 2&lt;sup&gt;2&lt;/sup&gt; + 0 * 2&lt;sup&gt;1&lt;/sup&gt; + 1 * 2&lt;sup&gt;0&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;小数部分：1 * 2&lt;sup&gt;-1&lt;/sup&gt; + 1 * 2&lt;sup&gt;-2&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>About</title>
        <link>https://yorkfish.github.io/review/about/</link>
        <pubDate>Mon, 24 Aug 2020 17:07:22 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/about/</guid>
        <description>博客：不求全，方便自己快速回忆 本人：在网上东学一点，西学一点的非科班菜鸟</description>
      </item>
      
    
  </channel>
</rss>