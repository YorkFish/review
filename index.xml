<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YorkFish on York&#39;s blog</title>
    <link>https://yorkfish.github.io/review/</link>
    <description>Recent content in YorkFish on York&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;2020, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 28 Aug 2020 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yorkfish.github.io/review/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>01. preview</title>
        <link>https://yorkfish.github.io/review/regex/01_preview/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/01_preview/</guid>
        <description>皇览揆余初度兮，肇锡余以嘉名。名余曰正则兮，字余曰灵均。 ——屈原《离骚》 1. 说明 上面是无意间发现的巧合 “正则表达式”(Regular Expre</description>
      </item>
      
      <item>
        <title>01. preview</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/01_preview/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/01_preview/</guid>
        <description>线程替代方案 subprocess 完全跳过线程，使用进程 是派生进程的主要替代方案 Python 2.4 后引入 multiprocessiong 使用 threadiing 接口派生，使用子进程 允许为多核或者多 CPU 派生进程，接口跟 threading 非常相</description>
      </item>
      
      <item>
        <title>01. preview</title>
        <link>https://yorkfish.github.io/review/python/threading/01_preview/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/01_preview/</guid>
        <description>例一 三个查看状态的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;gt;&amp;gt;&amp;gt; import threading &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; threading.active_count() # 被激活的线程数 1 &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; threading.enumerate() # 列出所有线程 [&amp;lt;_MainThread(MainThread, started 16928)&amp;gt;] &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; threading.current_thread() # 当前使用的线程 &amp;lt;_MainThread(MainThread, started 16928)&amp;gt; &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; threading.current_thread().isAlive()</description>
      </item>
      
      <item>
        <title>01. window</title>
        <link>https://yorkfish.github.io/review/python/tkinter/01_window/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/01_window/</guid>
        <description>1. 最简易的窗口 1 2 3 4 import tkinter as tk window = tk.Tk() window.mainloop() ps 默认标题：tk 默认大小：200x200 2. 更多设置 自定义标题内容：window.title(&amp;quot</description>
      </item>
      
      <item>
        <title>01. __call__</title>
        <link>https://yorkfish.github.io/review/python/class/01-__call__/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/01-__call__/</guid>
        <description>1. 说明 __call__ 可以让实例对象能够像函数一样加小括号进行调用 2. 举例 1 2 3 4 5 6 7 8 9 &amp;gt;&amp;gt;&amp;gt; class Test(object): ... def __init__(self): ... pass ... def __call__(self, *args, **kwargs): ... print(&amp;#34;Hello, I am YorkFish.&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; t() Hello, I am YorkFish. &amp;gt;&amp;gt;&amp;gt;</description>
      </item>
      
      <item>
        <title>01. abs()</title>
        <link>https://yorkfish.github.io/review/python/bif/01_abs/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/01_abs/</guid>
        <description>1. 说明 复数在数学上没有绝对值这个概念 abs() 对复数使用时，是求模 一个复数的模 = sqrt(实部2 + 虚部2) 2. 举例 1 2 3 &amp;gt;&amp;gt;&amp;gt; abs(3 + 4j) 5.0 &amp;gt;&amp;gt;&amp;gt;</description>
      </item>
      
      <item>
        <title>01. add, or, &amp;, |</title>
        <link>https://yorkfish.github.io/review/python/basics/01_and-or/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/01_and-or/</guid>
        <description>1. 两组运算符 and, or &amp;amp;, | 2. 四种情况 情况一 当运算对象（本质）为 True, False 时，两组运算符没有差别 1 2 3 4 5 &amp;gt;&amp;gt;&amp;gt; 1&amp;lt;2 and 3&amp;lt;4 True &amp;gt;&amp;gt;&amp;gt; 1&amp;lt;2 &amp;amp; 3&amp;lt;4 True &amp;gt;&amp;gt;&amp;gt; 情况二 当运算对象为数值变量</description>
      </item>
      
      <item>
        <title>01. function</title>
        <link>https://yorkfish.github.io/review/python/decorator/01_function/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/decorator/01_function/</guid>
        <description>例一 1 2 3 4 5 6 7 def add2(x, y): return x + y new_func = add2 print(new_func is add2) # True print(new_func(3, 4)) # 7 例二 就像列表名表示列表地址，函数名也表示函数地址 1 2 3 4 5 6 7 8 9 def add2(x, y): return x + y def test(x,</description>
      </item>
      
      <item>
        <title>01. install</title>
        <link>https://yorkfish.github.io/review/python/operation/01_install/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/operation/01_install/</guid>
        <description>1. Python 环境变量 因为 python 支持多版本安装，所以现在安装时默认没有勾选“添加到环境变量” 若只装一个版本，直接勾就好 若装了多个版本，想在命令行启动哪个，</description>
      </item>
      
      <item>
        <title>01. 概述</title>
        <link>https://yorkfish.github.io/review/python/numpy/01_overview/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/01_overview/</guid>
        <description>numpy 的用处 数学计算 形状计算 各种排序 傅里叶变换 线性代数计算 统计计算 ……</description>
      </item>
      
      <item>
        <title>01 位运算简介</title>
        <link>https://yorkfish.github.io/review/c/bit/01_overview/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/bit/01_overview/</guid>
        <description>1. 与 &amp;amp; 若参加与运算的是负数，则以补码形式表示二进制，然后“按位与” 作用 清零 取出数中指定位 保留数中指定位 2. 或 | 对一个数据的某些位定值为 1 3. 异或</description>
      </item>
      
      <item>
        <title>01. 不带参宏定义</title>
        <link>https://yorkfish.github.io/review/c/preprocessor/01_with_no_arguments/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/preprocessor/01_with_no_arguments/</guid>
        <description>1. 一般形式 #define 标识符 字符串 如 #define PI 3.1415926 2. 一些约定 宏名一般习惯用大写字母表示 宏定义是用宏名代替一个字符串，也就是作简单的置换，不作正确性检查 宏定义不</description>
      </item>
      
      <item>
        <title>01. 函数概述</title>
        <link>https://yorkfish.github.io/review/c/function/01_overview/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/01_overview/</guid>
        <description>1. 简介 一个 C 程序由一个或多个程序模块组成 每个程序模块作为一个源程序文件 一个源程序文件由一个或多个函数以及其他有关内容（如命令行、数据定义等）</description>
      </item>
      
      <item>
        <title>01. 指针概述</title>
        <link>https://yorkfish.github.io/review/c/pointer/01_overview/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/01_overview/</guid>
        <description>1. 优势 正确而灵活地运用指针，可以 有效地表示复杂的数据结构 动态分配内存 方便地使用字符串 有效而方便地使用数组 调用函数时，获得一个以上的结果 直接处</description>
      </item>
      
      <item>
        <title>01. 数据类型</title>
        <link>https://yorkfish.github.io/review/c/basics/01_data_type/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/01_data_type/</guid>
        <description>1. 分类 基本类型 构造类型 指针类型 空类型 2. 常用的基本类型 类型名 写法 缩写 短整型 short int short 整型 int / 长整型 long int long 长整型 long long int long long 一般 sizeof(short) &amp;lt; sizeof(long) sizeof(short) &amp;lt;= sizeof(int) 或 sizeof(int) &amp;lt;= sizeof(long)</description>
      </item>
      
      <item>
        <title>01. 文件概述</title>
        <link>https://yorkfish.github.io/review/c/file/01_overview/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/01_overview/</guid>
        <description>1. 简介 每个被使用的文件都在内存中开辟一个区，用来存放文件的有关信息 这些信息是保存在一个结构体变量中的 该结构体类型是由系统定义的，取名为 FILE 2. stdio.h</description>
      </item>
      
      <item>
        <title>01. 结构体概述</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/01_overview_of_struct/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/01_overview_of_struct/</guid>
        <description>一般声明形式 struct 结构体名 { 成员列表 }; 举例 1 2 3 4 5 6 7 8 struct student { char name[20]; char addr[30]; char gender; int age; int num; float score; }; ps 不要忽略最后的分号 “结构体名”用作结构体类型的标志，</description>
      </item>
      
      <item>
        <title>Quick start</title>
        <link>https://yorkfish.github.io/review/hugo/hugo_01/</link>
        <pubDate>Sun, 23 Aug 2020 00:30:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/hugo_01/</guid>
        <description>1. 官方文档 Hugo_quick-start: &amp;gt; 传送门 zdoc_theme: &amp;gt; 传送门 zdoc_quickstart: &amp;gt; 传送门 2. 初始化 假设本地站点名为 hugoblog 方法一 D:\&amp;gt;hugo new site hugoblog 方法二 新建文件夹 hugoblog D:\hugoblog&amp;gt;hugo new site . 3. 添加主题 方法一 打开网页：http</description>
      </item>
      
      <item>
        <title>01. array</title>
        <link>https://yorkfish.github.io/review/python/module/01_array/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/module/01_array/</guid>
        <description>官方文档：&amp;gt;&amp;gt;&amp;gt; 传送门 1. 类型表 Type Code C Type Python Type Minimum size (bytes) b signed char int 1 B unsigned char int 1 u Py_UNICODE Unicode character; deprecated since Python 3.3 2 h signed short int 2 H unsigned short int 2 i signed int int 2 I unsigned int</description>
      </item>
      
      <item>
        <title>01. Create</title>
        <link>https://yorkfish.github.io/review/c/thread/01_create/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/thread/01_create/</guid>
        <description>例一 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // filename: main.c #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;pthread.h&amp;gt; void* test(void* args) { printf(&amp;#34;Hello World\n&amp;#34;); return NULL; // 对应 void* } int main() { pthread_t th; pthread_create(&amp;amp;th, NULL, test, NULL); return 0; } 编译命令 gcc main.c -lpthread -o main 线程函数编译时需要连</description>
      </item>
      
      <item>
        <title>02. atom</title>
        <link>https://yorkfish.github.io/review/regex/02_atom/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/02_atom/</guid>
        <description>1. 常用 符号 匹配对象 . 除 \n, \r 外的任意字符 \d 数字 \s 空白符，如 \t, \n, \r, \f, \v \w 字母、数字、下划线（C# 还可以匹配汉字） \s, \w 为小写 数字仅指“阿拉伯数字”</description>
      </item>
      
      <item>
        <title>02. create</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/02_create/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/02_create/</guid>
        <description>例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import multiprocessing as mp def job(q): res = 0 for i in range(1000): res += i + i**2 + i**3 q.put(res) if __name__ == &amp;#34;__main__&amp;#34;: q = mp.Queue() p1 = mp.Process(target=job, args=(q,)) p2 = mp.Process(target=job, args=(q,)) p1.start() p2.start() p1.join() p2.join() res1 = q.get() res2 = q.get() print(res1</description>
      </item>
      
      <item>
        <title>02. name and ident</title>
        <link>https://yorkfish.github.io/review/python/threading/02_name_and_ident/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/02_name_and_ident/</guid>
        <description>例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import threading import time def thread_job(): print(&amp;#34;start job\n&amp;#34;) time.sleep(1) print(&amp;#34;finish job\n&amp;#34;) def main(): added_thread = threading.Thread(target=thread_job, name=&amp;#34;T1&amp;#34;) print(f&amp;#34;{added_thread.name=}, {added_thread.ident=}&amp;#34;) added_thread.start() print(f&amp;#34;{added_thread.name=}, {added_thread.ident=}&amp;#34;) added_thread.join() print(&amp;#34;all done\n&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: main() &amp;gt;&amp;gt;&amp;gt; added_thread.name=&#39;T1&#39;, added_thread.ident=None start job added_thread.name=&#39;T1&#39;, added_thread.ident=17000 finish job all done 说明 name: 线程名</description>
      </item>
      
      <item>
        <title>02. 两条线程</title>
        <link>https://yorkfish.github.io/review/c/thread/02_two_threads/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/thread/02_two_threads/</guid>
        <description>例一 创建两条线程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;pthread.h&amp;gt; void* test(void* args) { int i; for (i = 0; i &amp;lt; 100; i++) { printf(&amp;#34;%d\n&amp;#34;, i); } return NULL; } int main() { pthread_t th1; pthread_t th2; pthread_create(&amp;amp;th1, NULL, test, NULL); pthread_create(&amp;amp;th2, NULL,</description>
      </item>
      
      <item>
        <title>02. Label</title>
        <link>https://yorkfish.github.io/review/python/tkinter/02_label/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/02_label/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) window.mainloop() 2. 添加一个 label 1 2 3 l = tk.Label(window, text=&amp;#34;This is Label!&amp;#34;, bg=&amp;#34;green&amp;#34;, font=(&amp;#34;Consolas&amp;#34;, 16), width=20, height=2) l.pack() ps 一般地，tkinter 的 width, height 的单位是“字符” 3.</description>
      </item>
      
      <item>
        <title>02. __dict__</title>
        <link>https://yorkfish.github.io/review/python/class/02-__dict__/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/02-__dict__/</guid>
        <description>1. 简介 __dict__ 属性可以让用户查看类中包含的属性 __dict__ 可以用类名调用，也可以用类的实例对象调用 调用者 输出 类名 该类中所有类属性组成的字典 类的实例对象 该类中</description>
      </item>
      
      <item>
        <title>02. any() &amp; all()</title>
        <link>https://yorkfish.github.io/review/python/bif/02_any_all/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/02_any_all/</guid>
        <description>1. 说明 any(), all() 都可以批量判断可迭代对象里的参数是否等价于 True 简单地说 any() : 有人 True，那就 True all() : 大家 True，才是 True 2. 举例 any 可以这样理解 any() 1 2 3 4</description>
      </item>
      
      <item>
        <title>02. arg, args, kwargs</title>
        <link>https://yorkfish.github.io/review/python/basics/02_arg_args_kwargs/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/02_arg_args_kwargs/</guid>
        <description>1. 说明 若函数形如 test(arg, *args, **kwargs)，则 arg: 接收第一个参数 args: 若有，凑成元组 kwargs: 若有，凑成字典 2. 举例 1 2 3 4 5 def test(arg, *args, **kwargs): print(f&amp;#34;{arg=}, {args=}, {kwargs=}&amp;#34;) test(1, 2, student=&amp;#34;Tom&amp;#34;, teacher=&amp;#34;Jerry&amp;#34;) &amp;gt;&amp;gt;&amp;gt; arg=1, args=(2,), kwargs={&#39;student&#39;: &#39;Tom&#39;, &#39;teacher&#39;:</description>
      </item>
      
      <item>
        <title>02. decorator-function</title>
        <link>https://yorkfish.github.io/review/python/decorator/02_decorator_for_func/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/decorator/02_decorator_for_func/</guid>
        <description>举例思路 不加装饰器 加装饰器 无参函数 带参函数 参数个数确定 参数个数不确定 装饰器带参 多个装饰器 例一 不加装饰器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def</description>
      </item>
      
      <item>
        <title>02. ndarray build</title>
        <link>https://yorkfish.github.io/review/python/numpy/02_ndarray_build/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/02_ndarray_build/</guid>
        <description>1. 说明 n dimension array 简单地说，就是多维数组 2. 操作 导入 1 import numpy as np 创建 整数 1 2 3 4 5 6 &amp;gt;&amp;gt;&amp;gt; a = np.array([1, 2, 3, 4]) &amp;gt;&amp;gt;&amp;gt; a array([1, 2, 3, 4]) &amp;gt;&amp;gt;&amp;gt; print(a) [1 2 3 4] &amp;gt;&amp;gt;&amp;gt; 复数 1 2 3 &amp;gt;&amp;gt;&amp;gt; a = np.array([1, 2, 3, 4], dtype=complex)</description>
      </item>
      
      <item>
        <title>02. pip</title>
        <link>https://yorkfish.github.io/review/python/operation/02_pip/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/operation/02_pip/</guid>
        <description>1. 查看配置文件地址 C:\Users\York&amp;gt;pip config list -v For variant &#39;global&#39;, will try loading &#39;C:\ProgramData\pip\pip.ini&#39; For variant &#39;user&#39;, will try loading &#39;C:\Users\York\pip\pip.ini&#39; For variant &#39;user&#39;, will try loading &#39;C:\Users\York\AppData\Roaming\pip\pip.ini&#39; For variant &#39;site&#39;, will try loading &#39;c:\users\york\appdata\local\programs\python\python38\pip.ini&#39; answer: C:\Users\York\AppData\Roaming\pip\pip.ini 2. 使用命令写入文件 C:\Users\York&amp;gt;pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ Writing to C:\Users\York\AppData\Roaming\pip\pip.ini 3. 使用命令查看内容 C:\Users\York&amp;gt;pip</description>
      </item>
      
      <item>
        <title>02. random</title>
        <link>https://yorkfish.github.io/review/python/module/02_random/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/module/02_random/</guid>
        <description>例一 随机数 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;gt;&amp;gt;&amp;gt; import random &amp;gt;&amp;gt;&amp;gt; random.random() # [0, 1.0) 0.010390541410120413 &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; random.uniform(1, 10) # [1.0, 10.0) 2.2700210248026065 &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; random.randrange(1, 10) # [1, 10) 3 &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; random.randint(1, 10) # [1, 10] 8 &amp;gt;&amp;gt;&amp;gt; ps randint 其实是调用 randrange 1 2 def randint(self, a, b): return self.randrange(a, b+1) 例</description>
      </item>
      
      <item>
        <title>02. fopen() &amp; fclose()</title>
        <link>https://yorkfish.github.io/review/c/file/02_fopen_and_fclose/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/02_fopen_and_fclose/</guid>
        <description>1. 打开文件 fopen 一般形式 FILE * fp; fp = fopen(&amp;quot;filename&amp;quot;, &amp;quot;usemode&amp;quot;); 打开模式 文件使用方式 含义 &amp;quot;r&amp;quot; 读，打开 &amp;quot;w&amp;quot; 写，打开 &amp;quot;a&amp;quot; 追加，打开 &amp;quot;rb&amp;quot; 读，二进制打开 &amp;quot;wb&amp;quot; 写，二进制打开 &amp;quot;ab&amp;quot; 追加，二进制打开</description>
      </item>
      
      <item>
        <title>02. 举例</title>
        <link>https://yorkfish.github.io/review/c/bit/02_examples/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/bit/02_examples/</guid>
        <description>例一 取某几位数 求整数 a 右端的 4~7 位 原码：xxxx ... xxxx xxxx 位数：xxxx ... 7654 3210 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; int main() { short a = 666; // 0b0000 0010 1001 1010 short b = (a&amp;gt;&amp;gt;4) &amp;amp; ~(~0 &amp;lt;&amp;lt;</description>
      </item>
      
      <item>
        <title>02. 函数定义</title>
        <link>https://yorkfish.github.io/review/c/function/02_general_form/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/02_general_form/</guid>
        <description>1. 默认类型 如果在定义函数时不指定函数类型，系统会隐含指定函数类型为 int 不推荐这样做 2. 空函数 形式 1 2 void dummy() { } 调用此函数时，什么工作也不做，没有任</description>
      </item>
      
      <item>
        <title>02. 带参宏定义</title>
        <link>https://yorkfish.github.io/review/c/preprocessor/02_with_parameters/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/preprocessor/02_with_parameters/</guid>
        <description>1. 一般形式 #define 宏名(参数表) 字符串 如 定义：#define S(a,b) a*b 使用：area = S(3, 2); // 矩形边长 2. 两个注意点 坑一 1 2 3 4 5 6 7 8 9 10 #include &amp;lt;stdio.h&amp;gt; #define S(a,b) a*b int main() {</description>
      </item>
      
      <item>
        <title>02. 指针的定义与使用</title>
        <link>https://yorkfish.github.io/review/c/pointer/02_definition_and_use_of_pointer/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/02_definition_and_use_of_pointer/</guid>
        <description>1. 定义 1 2 3 int i; int * pointer_1; pointer_1 = &amp;amp;i; 将变量 i 的地址存放到指针变量 pointer_1 中，pointer_1 “指向”了变量 i 指针变量中只能存放地址（指针） 2. 两个运算符 &amp;amp;:</description>
      </item>
      
      <item>
        <title>02. 标识符长度</title>
        <link>https://yorkfish.github.io/review/c/basics/02_length_of_identifier/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/02_length_of_identifier/</guid>
        <description>ANSI C 标准没有规定标识符的长度（字符个数） C 标准建议至少应能识别 31 个字符 若两个标识符很长，但不同之处在头部的可识别范围内，则编译器可辨别</description>
      </item>
      
      <item>
        <title>Configuration</title>
        <link>https://yorkfish.github.io/review/hugo/hugo_02/</link>
        <pubDate>Sun, 23 Aug 2020 00:30:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/hugo_02/</guid>
        <description>1. 更换配置文件 删除博客根目录的 config.toml 复制 D:\hugoblog\themes\zdoc\exampleSite 的 4 个文件夹到博客根目录 ps 不复制，按照主题的说明文档依次新建也行 2. 部分结构 新的配置文件路径 D:hugoblog\config\_default 文件结构 root</description>
      </item>
      
      <item>
        <title>02. 定义方法</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/02_define/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/02_define/</guid>
        <description>1. 先声明，再定义 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; struct student { char name[20]; char gender; int num; }; int main() { struct student st1; return 0; } 2. 声明的同时定义 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;stdio.h&amp;gt; struct student { char name[20]; char</description>
      </item>
      
      <item>
        <title>03. metacharacter</title>
        <link>https://yorkfish.github.io/review/regex/03_metacharacter/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/03_metacharacter/</guid>
        <description>元字符：修饰原子的符号 1. 常用 符号 匹配对象 [] 原子列表，自定义原子范围 [^] 排除列表，自定义排除范围 ^ 匹配开头 $ 匹配结尾 | 逻辑运算（万能钥匙） \b 词边</description>
      </item>
      
      <item>
        <title>03. Lock</title>
        <link>https://yorkfish.github.io/review/c/thread/03_lock/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/thread/03_lock/</guid>
        <description>例一 未加锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;pthread.h&amp;gt; int s = 0; void* test(void* args) { int i; for (i = 0; i &amp;lt; 100000; i++) { s++; } return NULL; } int main() { pthread_t th1; pthread_t th2; pthread_create(&amp;amp;th1, NULL,</description>
      </item>
      
      <item>
        <title>03. without setting</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/03_without_setting/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/03_without_setting/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import multiprocessing import time def work(): for i in range(1, 11): print(i, &amp;#34;working...&amp;#34;) time.sleep(0.2) def main(): work_process = multiprocessing.Process(target=work) work_process.start() time.sleep(1) print(&amp;#34;all done&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: main() &amp;gt;&amp;gt;&amp;gt; 1 working... 2 working... 3 working... 4 working... 5 working... all done 6 working... 7 working... 8 working... 9 working... 10</description>
      </item>
      
      <item>
        <title>03. without setting</title>
        <link>https://yorkfish.github.io/review/python/threading/03_without_setting/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/03_without_setting/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import threading import time def thread_job(): print(&amp;#34;start job\n&amp;#34;) time.sleep(1) print(&amp;#34;finish job\n&amp;#34;) def main(): added_thread = threading.Thread(target=thread_job) added_thread.start() print(&amp;#34;all done\n&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: main() &amp;gt;&amp;gt;&amp;gt; start job all done finish job 说明 与 C 略有不同 main thread_job | | ------&amp;gt; | | over | &amp;quot;main&amp;quot; 已经</description>
      </item>
      
      <item>
        <title>03. Button</title>
        <link>https://yorkfish.github.io/review/python/tkinter/03_button/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/03_button/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 7 8 9 10 11 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) string = tk.StringVar() string.set(&amp;#34;This is Label!&amp;#34;) l = tk.Label(window, textvariable=string, bg=&amp;#34;green&amp;#34;, font=(&amp;#34;Consolas&amp;#34;, 16), width=20, height=2) l.pack() window.mainloop() 2. 添加一个 button 1 2 3 b = tk.Button(window, text=&amp;#34;hit me&amp;#34;, bg=&amp;#34;white&amp;#34;, font=(&amp;#34;Arial&amp;#34;, 12), width=10, height=2, command=hit_me) b.pack() 3. hit_me 方</description>
      </item>
      
      <item>
        <title>03. __new__</title>
        <link>https://yorkfish.github.io/review/python/class/03-__new__/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/03-__new__/</guid>
        <description>1. 说明 __new__() 先于 __init() 被调用 先执行 __new__()，生成一个实例对象 再执行 __init__()，对生成的对象进行初始化 2. 举例 一般很少用到 __new__() 当继承一</description>
      </item>
      
      <item>
        <title>03. compare</title>
        <link>https://yorkfish.github.io/review/python/basics/03_compare/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/03_compare/</guid>
        <description>1. 说明 a &amp;lt; b &amp;lt; c &amp;lt; ... &amp;lt; n-1 &amp;lt; n 会被转换为 a &amp;lt; b and b &amp;lt; c and ... and n-1 &amp;lt; n 若 a &amp;lt; b 为 False，则后面内容会被短路 a &amp;lt; b &amp;gt; c 也是合法的 2. 举例 1 2 3 4 5</description>
      </item>
      
      <item>
        <title>03. decorator-class</title>
        <link>https://yorkfish.github.io/review/python/decorator/03_decorator_for_class/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/decorator/03_decorator_for_class/</guid>
        <description>举例 1 2 3 4 5 6 7 8 9 10 11 12 def deco(clss): clss.x = 1 clss.y = 2 return clss @deco class Person(object): pass print(Person.__dict__) &amp;gt;&amp;gt;&amp;gt; {&#39;__module__&#39;: &#39;__main__&#39;, &#39;__dict__&#39;: &amp;lt;attribute &#39;__dict__&#39; of &#39;Person&#39; objects&amp;gt;, &#39;__weakref__&#39;: &amp;lt;attribute &#39;__weakref__&#39; of &#39;Person&#39; objects&amp;gt;, &#39;__doc__&#39;: None, &#39;x&#39;: 1, &#39;y&#39;: 2}</description>
      </item>
      
      <item>
        <title>03. del()</title>
        <link>https://yorkfish.github.io/review/python/bif/03_del/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/03_del/</guid>
        <description>1. 说明 del 不会去操作内存，它只是删除了变量的引用 当某片内存空间没有引用的时候，该片空间会自动释放 2. 举例 1 2 3 4 5 6 7 8 9 10 &amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; b = a</description>
      </item>
      
      <item>
        <title>03. ndarray attribute</title>
        <link>https://yorkfish.github.io/review/python/numpy/03_ndarray_attribute/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/03_ndarray_attribute/</guid>
        <description>1. 创建 1 2 3 4 5 6 7 &amp;gt;&amp;gt;&amp;gt; import numpy as np &amp;gt;&amp;gt;&amp;gt; a = np.arange(12).reshape((3, 4)) &amp;gt;&amp;gt;&amp;gt; print(a) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11]] &amp;gt;&amp;gt;&amp;gt; 2. 查看性质 数组的轴（维度） 1 2 3 &amp;gt;&amp;gt;&amp;gt; a.ndim 2 &amp;gt;&amp;gt;&amp;gt; 数组的形状 1 2 3 &amp;gt;&amp;gt;&amp;gt; a.shape (3, 4)</description>
      </item>
      
      <item>
        <title>03. reduce</title>
        <link>https://yorkfish.github.io/review/python/module/03_reduce/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/module/03_reduce/</guid>
        <description>1. 简介 Python3 要使用 reduce 需要从 functools 导入 reduce: 规约，可以使各元素按顺序进行计算，每次计算结果会参与到下次计算中 2. 举例 1 2 3 4 5 6 7 8 &amp;gt;&amp;gt;&amp;gt; from functools import reduce &amp;gt;&amp;gt;&amp;gt; def mul(a, b): ... return a</description>
      </item>
      
      <item>
        <title>03. fgetc() &amp; fputc()</title>
        <link>https://yorkfish.github.io/review/c/file/03_fgetc_and_fputc/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/03_fgetc_and_fputc/</guid>
        <description>1. fgetc 简介 从指定的文件读入一个字符，该文件必须是以读或写方式打开的 一般形式 char ch = fgetc(fp); // fp 为文件型指针变量 说明 如果在执行 fgetc 函数读字符时遇到文件结束</description>
      </item>
      
      <item>
        <title>03. typedef</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/03_typedef/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/03_typedef/</guid>
        <description>1. 作用 声明新的类型名，代替已有的类型名 2. 简介 用 typedef 可以声明各种类型名，但不能用来定义变量 #define 是在预编译时处理的，它只能作简单的字符串替换 typedef 是在编</description>
      </item>
      
      <item>
        <title>03. 一维数组与指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/03_arrays_and_pointers-1/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/03_arrays_and_pointers-1/</guid>
        <description>1. 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;stdio.h&amp;gt; int main() { int arr1[4] = {1, 2, 3, 4}; int arr2[] = {1, 2, 3, 4}; int* p1 = arr1; int* p2 = &amp;amp;arr1[0]; int arr3[5] = {0}; // 0, 0, 0, 0, 0 int arr4[5] = {1, 2, 3}; // 1, 2, 3, 0, 0 // c99,</description>
      </item>
      
      <item>
        <title>03. 位段</title>
        <link>https://yorkfish.github.io/review/c/bit/03_bit_field/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/bit/03_bit_field/</guid>
        <description>1. 简介 C 语言允许在结构体中以位为单位，来指定其成员所占内存长度 这种以位为单位的成员称为“位段”或“位域” bit field 利用位段能够利用较少的位数存储数</description>
      </item>
      
      <item>
        <title>03. 函数的参数与返回值</title>
        <link>https://yorkfish.github.io/review/c/function/03_params_and_ret_values/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/03_params_and_ret_values/</guid>
        <description>1. 形参 形参，在未出现函数调用时，它们并不占内存中的存储单元 只有在发生函数调用时，形参才被分配内存单元 在调用结束后，形参所占的内存空间也被释放</description>
      </item>
      
      <item>
        <title>03. 导入</title>
        <link>https://yorkfish.github.io/review/c/preprocessor/03_include/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/preprocessor/03_include/</guid>
        <description>1. 前提 .h + .c 2. 编译 在编译时并不是对两个文件分别进行编译，然后再将它们的目标程序连接的 而是在经过编译预处理后将头文件 .h 包含到主文件中，得到一个</description>
      </item>
      
      <item>
        <title>03. 数值的表示</title>
        <link>https://yorkfish.github.io/review/c/basics/03_representation_of_value/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/03_representation_of_value/</guid>
        <description>1. 补码 数值是以补码形式存储的 正数：原码 = 反码 = 补码 负数 反码：原码除符号位，按位取反 补码：原码除符号位，按位取反再加 1 2. unsigned int 一个整数常量后面加</description>
      </item>
      
      <item>
        <title>Make doc</title>
        <link>https://yorkfish.github.io/review/hugo/hugo_03/</link>
        <pubDate>Sun, 23 Aug 2020 00:30:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/hugo_03/</guid>
        <description>Step1 删除 D:hugoblog\content&amp;gt; 下的文件夹 ko, en 新建 _index.md，并写入如下语句 --- title: ZDoc description: Hugo ZDoc theme landing page date: 2020-08-28T00:00:00+08:00 draft: false landing: height: 500 image: favicon/android-icon-192x192.png title: - YorkFish&#39;s Blog text: - Knowledge review titleColor: textColor: spaceBetweenTitleText: 25 buttons: - link: hugo/hugo_01 text: GET STARTED color: primary ---</description>
      </item>
      
      <item>
        <title>03. virtual environment</title>
        <link>https://yorkfish.github.io/review/python/operation/03_virtual_env/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/operation/03_virtual_env/</guid>
        <description>1. 说明 除了用 PyCharm 创建虚拟环境，还可以用命令 venv 是自带的 virtualenv 需要自行安装 2. venv 使用命令：D:\test&amp;gt;python -m venv env 启用命令：D:\tes</description>
      </item>
      
      <item>
        <title>04. paraphrase</title>
        <link>https://yorkfish.github.io/review/regex/04_paraphrase/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/04_paraphrase/</guid>
        <description>1. 使用 与大多数转义方式一样，使用 \ 写法 表示 \\ \ \. . \^ ^ &amp;hellip; 2. 说明 在 [] 内，有些符号不必转义，如 ., $, |，且强行转义也行</description>
      </item>
      
      <item>
        <title>04. daemon</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/04_daemon/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/04_daemon/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import multiprocessing import time def work(): for i in range(1, 11): print(i, &amp;#34;working...&amp;#34;) time.sleep(0.2) def main(): work_process = multiprocessing.Process(target=work) # 设置守护主进程，主进程结束后，子进程直接销毁，不再执行子</description>
      </item>
      
      <item>
        <title>04. daemon</title>
        <link>https://yorkfish.github.io/review/python/threading/04_daemon/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/04_daemon/</guid>
        <description>主线程结束，不想等待子线程，可以设置守护主线程 目标示意图 main thread_job | | ------&amp;gt; | X over &amp;quot;main&amp;quot; 结束后，子线程也跟着结束 方式一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
      </item>
      
      <item>
        <title>04. Lock - upgrade</title>
        <link>https://yorkfish.github.io/review/c/thread/04_lock_upgrade/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/thread/04_lock_upgrade/</guid>
        <description>例一 使用全局变量存值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include &amp;lt;stdio.h&amp;gt;#include</description>
      </item>
      
      <item>
        <title>04. Text</title>
        <link>https://yorkfish.github.io/review/python/tkinter/04_text/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/04_text/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) window.mainloop() 2. 添加一个 Text 1 2 t = tk.Text(window, height=2) t.pack() 3. insert 文字 insert 到光标后：t.insert(&amp;quot;insert&amp;</description>
      </item>
      
      <item>
        <title>04. callable</title>
        <link>https://yorkfish.github.io/review/python/class/04_callable/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/04_callable/</guid>
        <description>1. 简介 callable() 用于检查一个对象是否可调用 对于函数、方法、lambda 函数式、类，以及实现了 __call__ 方法的类实例, 它都返回 True 对于整数、字符串、列表、元组、</description>
      </item>
      
      <item>
        <title>04. equal</title>
        <link>https://yorkfish.github.io/review/python/basics/04_equal/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/04_equal/</guid>
        <description>例一 不同类型的数值，只要大小相等，Python 就认为它们相等 1 2 3 4 5 6 7 8 9 10 &amp;gt;&amp;gt;&amp;gt; a = 1 &amp;gt;&amp;gt;&amp;gt; b = 1.0 &amp;gt;&amp;gt;&amp;gt; a == b True &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; a = [1, 2] &amp;gt;&amp;gt;&amp;gt; b = [1.0, 2.0] &amp;gt;&amp;gt;&amp;gt; a == b True &amp;gt;&amp;gt;&amp;gt;</description>
      </item>
      
      <item>
        <title>04. eval()</title>
        <link>https://yorkfish.github.io/review/python/bif/04_eval/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/04_eval/</guid>
        <description>1. 简介 eval for evaluate 原型：eval(expression, globals=None, locals=None) 2. 举例 例一 1 2 3 4 5 6 &amp;gt;&amp;gt;&amp;gt; s = &amp;#34;[[1, 2], [3, 4], [5, 6]]&amp;#34; &amp;gt;&amp;gt;&amp;gt; s &amp;#39;[[1, 2], [3, 4], [5, 6]]&amp;#39; &amp;gt;&amp;gt;&amp;gt; eval(s) [[1, 2], [3, 4], [5, 6]] &amp;gt;&amp;gt;&amp;gt; 例二 先局部 再</description>
      </item>
      
      <item>
        <title>04. ndarray calculate</title>
        <link>https://yorkfish.github.io/review/python/numpy/04_ndarray_calculate/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/04_ndarray_calculate/</guid>
        <description>1. 说明 当对 ndarray 使用各种算术运算符时 numpy 会将其应用于数组的每一个元素 计算完成后返回一个与原来形状相同的 ndarray 2. 操作 导入 1 import numpy as np 四则运算 1 2 3 4 5 6 7</description>
      </item>
      
      <item>
        <title>04. powershell virtual-env</title>
        <link>https://yorkfish.github.io/review/python/operation/04_powershell/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/operation/04_powershell/</guid>
        <description>1. 设置 “以管理员身份运行”打开 PowerShell 输入 set-executionpolicy remotesigned 执行策略可以防止您执行不信任的脚本。 更改执行策略可能会使您面临 about_Execution_Policies 帮助主题中所述的安全风险。 是否要更改</description>
      </item>
      
      <item>
        <title>04. typing</title>
        <link>https://yorkfish.github.io/review/python/module/04_typing/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/module/04_typing/</guid>
        <description>1. 说明 因为 Python 的变量是动态的，所以不能真正像 C, Java 那样对函数的参数类型进行严格定义 Python 3.6 以后有了类型提示 列表、字典等，需要导入 typing 模块 2. 举例 例一 1 2</description>
      </item>
      
      <item>
        <title>04. fread() &amp; fwrite()</title>
        <link>https://yorkfish.github.io/review/c/file/04_fread_and_fwrite/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/04_fread_and_fwrite/</guid>
        <description>1. 简介 fread 和 fwrite 函数可以用来读写一个字符 因为常常需要一次读取一组数据，ANSI C 标准提出设置这两个函数，用来读写一个数据块 2. 一般形式 1 2 fread(buffer, size, count, fp);</description>
      </item>
      
      <item>
        <title>04. 函数的调用</title>
        <link>https://yorkfish.github.io/review/c/function/04_function_call/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/04_function_call/</guid>
        <description>1. 多个实参的求值顺序 有的编译器自右向左 有的编译器自左向右 应当避免这种容易混淆的用法 2. 编译器的检查 只检查参数个数和参数类型，而不检查参数名 对形</description>
      </item>
      
      <item>
        <title>04. 多维数组与指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/04_arrays_and_pointers-2/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/04_arrays_and_pointers-2/</guid>
        <description>1. 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int arr1[3][4] = { {10, 11, 12, 13}, {14, 15, 16, 17}, {18, 19, 20, 21}}; int arr2[][4] = { {10, 11, 12, 13}, {14, 15, 16, 17}, {18, 19, 20, 21}}; int arr3[][4] = { {10}, {14, 15}, {18, 19, 20}}; Tip: 指针尽量用 p[i] 的形式，</description>
      </item>
      
      <item>
        <title>04. 字符型数据</title>
        <link>https://yorkfish.github.io/review/c/basics/04_character_data/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/04_character_data/</guid>
        <description>1. 换行与回车 \n 换行 \r 回车 ps 以前的打字机，打满一行字后，先把纸往上卷（换行），再把纸往右拉（回车） 2. 八进制 八进制 十进制 ASCII \101 65 &#39;A&#39; 3. 字符与字符串 &#39;a&#39;</description>
      </item>
      
      <item>
        <title>04. 条件编译</title>
        <link>https://yorkfish.github.io/review/c/preprocessor/04_conditional_compilation/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/preprocessor/04_conditional_compilation/</guid>
        <description>1. 优点 采用条件编译，可以减少被编译的语句，从而减少目标程序的长度，减少运行时间 2. 三种形式 形式一 1 2 3 #ifdef 标识符 // 程序段1 #endif 形式二 1 2 3 4 5 #ifdef 标</description>
      </item>
      
      <item>
        <title>04. 结构体变量的使用</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/04_usage/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/04_usage/</guid>
        <description>1. 引用的方式 一般形式 结构体变量名.成员名 如：student1.num = 10010; . 是成员（分量）运算符，它在所有的运算符中优先级最高的 举例 1 2 3 4 5</description>
      </item>
      
      <item>
        <title>Deploy to the cloud</title>
        <link>https://yorkfish.github.io/review/hugo/hugo_04/</link>
        <pubDate>Sun, 23 Aug 2020 00:30:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/hugo_04/</guid>
        <description>1. bulid D:\hugoblog&amp;gt;hugo --buildDrafts 上方命令会在博客根目录生成一个名为 public 的文件夹，里面是 hugo 生成的网页文件 ps Hugo 与 MkDocs 不同 生成静态网页后，需要开启服务才有效果 在本地双击 index.html 能打</description>
      </item>
      
      <item>
        <title>05. join</title>
        <link>https://yorkfish.github.io/review/python/threading/05_join/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/05_join/</guid>
        <description>希望在子线程结束后，再结束主线程 目标示意图 main thread_job | | ------&amp;gt; | | &amp;lt;------ | over 例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import threading import time def thread_job(): print(&amp;#34;start job\n&amp;#34;) time.sleep(1) print(&amp;#34;finish job\n&amp;#34;) def main(): added_thread = threading.Thread(target=thread_job) added_thread.start() added_thread.join() #</description>
      </item>
      
      <item>
        <title>05. transfer parameters</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/05_transfer_parameters/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/05_transfer_parameters/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import multiprocessing import time def sing(num): for i in range(num): print(&amp;#34;singing...&amp;#34;) time.sleep(0.5) def dance(num): for i in range(num): print(&amp;#34;dancing...&amp;#34;) time.sleep(0.5) if __name__ == &amp;#34;__main__&amp;#34;: sing_process = multiprocessing.Process(target=sing, args=(2,)) dance_process = multiprocessing.Process(target=dance, kwargs={&amp;#34;num&amp;#34;: 3}) sing_process.start() dance_process.start() 说明 args 以元组的方式给执行任</description>
      </item>
      
      <item>
        <title>05. Entry</title>
        <link>https://yorkfish.github.io/review/python/tkinter/05_entry/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/05_entry/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) window.mainloop() 2. 添加三个 entry 1 2 3 4 5 6 e1 = tk.Entry(window, font=(&amp;#34;Consolas&amp;#34;, 20), show=None) # 显示 e2 = tk.Entry(window, font=(&amp;#34;Consolas&amp;#34;, 20), show=&amp;#39;*&amp;#39;) # 隐藏 e3 = tk.Entry(window, font=(&amp;#34;Consolas&amp;#34;, 20), show=&amp;#39;1&amp;#39;) # 恶搞 e1.pack() e2.pack() e3.pack() 3. 获取</description>
      </item>
      
      <item>
        <title>05. filter()</title>
        <link>https://yorkfish.github.io/review/python/bif/05_filter/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/05_filter/</guid>
        <description>1. 说明 函数名：filter 顾名思意：筛选程序、过滤器 2. 举例 例一 1 2 3 4 &amp;gt;&amp;gt;&amp;gt; a = list(range(10)) &amp;gt;&amp;gt;&amp;gt; [e for e in a if e % 2 == 0] [0, 2, 4, 6, 8] &amp;gt;&amp;gt;&amp;gt; 例二 1 2 3 4 5 &amp;gt;&amp;gt;&amp;gt; a = list(range(10)) &amp;gt;&amp;gt;&amp;gt; b</description>
      </item>
      
      <item>
        <title>05. for-else</title>
        <link>https://yorkfish.github.io/review/python/basics/05_for_else/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/05_for_else/</guid>
        <description>1. 说明 与 for 对应的 else 只有完整地走完 for 后才生效 2. 举例 1 2 3 4 5 6 7 8 9 10 11 12 def find_num(lst, num): for i in lst: if i == num: print(&amp;#34;found&amp;#34;, num) break else: print(&amp;#34;not found&amp;#34;, num) lst = [1, 2, 3, 4, 5] find_num(lst, 3) find_num(lst, 6) &amp;gt;&amp;gt;&amp;gt; found 3 not found</description>
      </item>
      
      <item>
        <title>05. hello world</title>
        <link>https://yorkfish.github.io/review/python/operation/05_hello_world/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/operation/05_hello_world/</guid>
        <description>通过 python -h 可以查看帮助信息 例一 python file 在 D:\test 下新建文件 hellp.py 写入 print(&amp;quot;hello world&amp;quot;) 在命令行运行 D:\test&amp;gt;python hellp.py hello world D:\test&amp;gt; 例二 python -m D:\test&amp;gt;python -m hellp hello world D:\test&amp;gt; 例三 python -c C:\Users\York&amp;gt;python -c &amp;quot;print(&#39;hello world&#39;)&amp;quot; hello world C:\Users\York&amp;gt; 例四 通过“标准输出”</description>
      </item>
      
      <item>
        <title>05. matrix multiplication</title>
        <link>https://yorkfish.github.io/review/python/numpy/05_ndarray_matrix/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/05_ndarray_matrix/</guid>
        <description>1. 说明 numpy 有矩阵类 但还是尽量使用 ndarray 为好 不要混用！ 2. 操作 导入 1 import numpy as np 创建 1 2 3 4 5 6 7 8 9 10 11 12 &amp;gt;&amp;gt;&amp;gt; a = np.arange(12).reshape((3, 4)) &amp;gt;&amp;gt;&amp;gt; b = np.arange(12).reshape((4, 3)) &amp;gt;&amp;gt;&amp;gt; print(a) [[ 0 1 2 3] [ 4 5 6 7] [</description>
      </item>
      
      <item>
        <title>05. others</title>
        <link>https://yorkfish.github.io/review/python/module/05_others/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/module/05_others/</guid>
        <description>1. 说明 之前做 Python Challenge，对用到的“库”做过总结 另一个博客：&amp;gt;&amp;gt;&amp;gt;传送门 2. 预览 base64 binascii bz2 collections datetime diffflib email gzip hashlib os pickle Pillow re requests struct this urlib wave</description>
      </item>
      
      <item>
        <title>05. 类变量</title>
        <link>https://yorkfish.github.io/review/python/class/05_class_var/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/05_class_var/</guid>
        <description>举例 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;gt;&amp;gt;&amp;gt; class Hero(object): ... game_name = &amp;#34;LOL&amp;#34; # 类变量 ... &amp;gt;&amp;gt;&amp;gt; lijing = Hero() &amp;gt;&amp;gt;&amp;gt; lijing.game_name &amp;#39;LOL&amp;#39; &amp;gt;&amp;gt;&amp;gt; lijing.game_name = &amp;#34;DNF&amp;#34; &amp;gt;&amp;gt;&amp;gt; lijing.game_name &amp;#39;DNF&amp;#39; &amp;gt;&amp;gt;&amp;gt; del lijing.game_name &amp;gt;&amp;gt;&amp;gt; lijing.game_name &amp;#39;LOL&amp;#39; &amp;gt;&amp;gt;&amp;gt;</description>
      </item>
      
      <item>
        <title>05. fscanf() &amp; fprintf()</title>
        <link>https://yorkfish.github.io/review/c/file/05_fscanf_and_fprintf/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/05_fscanf_and_fprintf/</guid>
        <description>1. 简介 与 scanf() 和 printf() 作用相仿 都是格式化读写函数 2. 一般调用方式 fscanf(文件指针, 格式字符串, 输出表列); fprintf(文件指针, 格式字符串,</description>
      </item>
      
      <item>
        <title>05. 二维数组传参</title>
        <link>https://yorkfish.github.io/review/c/pointer/05_array_param_transfer/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/05_array_param_transfer/</guid>
        <description>例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include &amp;lt;stdio.h&amp;gt; void traverseArray(int (*arr)[5], int arrSize, int arrColSize){ for (int i = 0; i &amp;lt; arrSize; i++) { for (int j = 0; j &amp;lt; arrColSize; j++) { printf(&amp;#34;%d &amp;#34;, arr[i][j]); } printf(&amp;#34;\n&amp;#34;); } } int main() { int nums[][5] = { {11, 12,</description>
      </item>
      
      <item>
        <title>05. 优先级</title>
        <link>https://yorkfish.github.io/review/c/basics/05_priority/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/05_priority/</guid>
        <description>1. 常见的情况 ! &amp;gt; 算术 &amp;gt; 关系 &amp;gt; 逻辑 &amp;gt; 赋值 &amp;gt; 逗号 算术：*, /, %, +, - 关系：&amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=, !=, == 逻辑：&amp;amp;&amp;amp;, || 赋值：= 及其扩展（如 +</description>
      </item>
      
      <item>
        <title>05. 全局变量与局部变量</title>
        <link>https://yorkfish.github.io/review/c/function/05_global_var_and_local_var/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/05_global_var_and_local_var/</guid>
        <description>1. 全局变量 全局变量“管”的是它定义之下的语句 不在必要时，不要使用全局变量 全局变量使用过多，会降低程序的清晰性 2. 局部变量 在同一个源文件中，若外</description>
      </item>
      
      <item>
        <title>05. 结构体数组</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/05_struct_array/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/05_struct_array/</guid>
        <description>1. 定义 例一 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; typedef struct student { char name[20]; char gender; int num; } Student; int main() { Student stu[3]; return 0; } 例二 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;stdio.h&amp;gt; struct student { char name[20]; char gender; int</description>
      </item>
      
      <item>
        <title>Shortcodes</title>
        <link>https://yorkfish.github.io/review/hugo/shortcodes/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/hugo/shortcodes/</guid>
        <description>1. alert {{&amp;lt; alert theme=&amp;quot;warning&amp;quot; &amp;gt;}} # warning, success, info, danger **this** is a text {{&amp;lt; /alert &amp;gt;}} this is &amp;ldquo;warning&amp;rdquo; this is &amp;ldquo;success&amp;rdquo; this is &amp;ldquo;info&amp;rdquo; this is &amp;ldquo;danger&amp;rdquo; 2. expand {{&amp;lt; expand &amp;quot;Expand me&amp;quot; &amp;gt;}} Some Markdown Contents {{&amp;lt; /expand &amp;gt;}} Expand me Some Markdown Contents 3. notice {{&amp;lt; notice success &amp;quot;This is title&amp;quot; &amp;gt;}} # success, info, warning, error success {{&amp;lt; /notice &amp;gt;}} success info warning error</description>
      </item>
      
      <item>
        <title>05. group</title>
        <link>https://yorkfish.github.io/review/regex/05_group/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/05_group/</guid>
        <description>(): 修饰原子 1. 作用 将多个原子视为一个原子处理 将括号中的内容暂存于内存，方便后期调用 改变优先级，配合 | 使用 2. 暂存 默认情况下，每个括号都会暂存规则</description>
      </item>
      
      <item>
        <title>06. brackets</title>
        <link>https://yorkfish.github.io/review/regex/06_brackets/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/06_brackets/</guid>
        <description>1. 说明 因为不作为分组，所以无法复用或引用 2. 注释 (?#注释) 3. 断言 先行断言从左往右看 后行断言从右往左看 正向先行断言 (?=表达式) 如 york(?</description>
      </item>
      
      <item>
        <title>06. transfer parameters</title>
        <link>https://yorkfish.github.io/review/python/threading/06_transfer_parameters/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/06_transfer_parameters/</guid>
        <description>例一 args 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import threading import time from queue import Queue def job(lst, q): for i in range(len(lst)): lst[i] = lst[i] ** 2 q.put(lst) def multi_threading(data): q = Queue() threads = [] length = len(data) for i in range(length): t</description>
      </item>
      
      <item>
        <title>06. Listbox</title>
        <link>https://yorkfish.github.io/review/python/tkinter/06_listbox/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/06_listbox/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 7 8 9 10 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x400&amp;#34;) str1 = tk.StringVar() l = tk.Label(window, textvariable=str1, bg=&amp;#34;yellow&amp;#34;, font=(&amp;#34;Consolas&amp;#34;, 20), width=10, height=2) l.pack() window.mainloop() 2. 添加一个 listbox 1 2 3 4 string = tk.StringVar() string.set((11, 22, 33, 44)) lb = tk.Listbox(window, listvariable=string) lb.pack() 3. insert 内容 1 2</description>
      </item>
      
      <item>
        <title>06. format</title>
        <link>https://yorkfish.github.io/review/python/basics/06_format/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/06_format/</guid>
        <description>1. 说明 有人喜欢 &#39;%s %s&#39; % (&#39;one&#39;, &#39;two&#39;) 的形式 有人喜欢 &#39;{} {}&#39;.format(1, 2) 的形式 于是 Python 保留了两种形式 3.6 之后，增加了 f-string 3.8 之后，f-string 增加了 f&#39;{expr=}&#39; 2. 简介 要详细了解，还得</description>
      </item>
      
      <item>
        <title>06. join()</title>
        <link>https://yorkfish.github.io/review/python/bif/06_join/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/06_join/</guid>
        <description>1. 先说结论 字符串是不可变对象，每次使用 + 拼接，都会生成新对象 join() 没有中间字符串生成，效率较高 计算结果所需的内存 一次性申请内存空间 把每个字符串复</description>
      </item>
      
      <item>
        <title>06. REPL</title>
        <link>https://yorkfish.github.io/review/python/operation/06_repl/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/operation/06_repl/</guid>
        <description>1. 说明 REPL: read-evaluates-print loop evaluates 对应的是 exec，不是 eval 2. Banner 横幅 命令行敲完 python 后出现的信息 Python 3.8.3 (default, Jul 2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32 Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information. 有意思的小例子 1 2</description>
      </item>
      
      <item>
        <title>06. 实例变量</title>
        <link>https://yorkfish.github.io/review/python/class/06_instance_var/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/06_instance_var/</guid>
        <description>举例 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;gt;&amp;gt;&amp;gt; class Hero(object): ... game_name = &amp;#34;LOL&amp;#34; # 类变量 ... def __init__(self, name): ... self.name = name # 实例变量，由每个对象自行赋值，对象之间不影响 ... &amp;gt;&amp;gt;&amp;gt; lijing = Hero(&amp;#34;Lingjing&amp;#34;) &amp;gt;&amp;gt;&amp;gt; lijing.name &amp;#39;Lingjing&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; garen = Hero(&amp;#34;Garen&amp;#34;)</description>
      </item>
      
      <item>
        <title>06. getw() &amp; putw()</title>
        <link>https://yorkfish.github.io/review/c/file/06_getw_and_putw/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/06_getw_and_putw/</guid>
        <description>1. 简介 大多数 C 编译系统都提供 getw 和 putw 用来对磁盘文件读写一个字（整数） 2. 举例 例一 使用自带的函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include &amp;lt;stdio.h&amp;gt; int main() { FILE* fp = fopen(&amp;#34;test.txt&amp;#34;, &amp;#34;w&amp;#34;); putw(10,</description>
      </item>
      
      <item>
        <title>06. 变量的存储类别</title>
        <link>https://yorkfish.github.io/review/c/function/06_storage_category_of_var/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/06_storage_category_of_var/</guid>
        <description>1. 两种角度 从变量的作用域（空间）角度来分 全局变量 局部变量 从变量值存在的时间（生存期）角度来分 静态存储方式 动态存储方式 2. 结构 用户区 ----------- | 程序区 |</description>
      </item>
      
      <item>
        <title>06. 四则运算</title>
        <link>https://yorkfish.github.io/review/c/basics/06_arithmetic/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/06_arithmetic/</guid>
        <description>1. 除法 如果除数或被除数中有一个为负值，则舍入的方向是不固定的 如 -5/3 有的系统：-1 （取整后向零靠拢） 有的系统：-2 C 一般是“取整后向零靠拢” Python 一</description>
      </item>
      
      <item>
        <title>06. 字符串与指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/06_strings_and_pointers/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/06_strings_and_pointers/</guid>
        <description>1. 字符数组和字符指针变量 字符数组：只能单个更改 字符指针：只能整体更改 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt; int main() { char str1[] = &amp;#34;york&amp;#34;; str1[0] = &amp;#39;Y&amp;#39;; printf(&amp;#34;%s\n&amp;#34;, str1); char* str2 = &amp;#34;fish&amp;#34;; str2 = &amp;#34;Fish&amp;#34;; printf(&amp;#34;%s\n&amp;#34;, str2);</description>
      </item>
      
      <item>
        <title>06. 结构体类型的大小</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/06_sizeof_struct/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/06_sizeof_struct/</guid>
        <description>并不是简单地累加成员变量占用的大小 举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include &amp;lt;stdio.h&amp;gt; struct test1 { char gender; }; struct test2 { char gender; int num;</description>
      </item>
      
      <item>
        <title>06. 链表</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/06_linked_list/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/06_linked_list/</guid>
        <description>1. 简介 链表可以根据需要开辟内存单元 链表有一个“头指针”变量 它存放一个地址 该地址指向一个元素 链表中每一个元素称为“结点” 每个结点都应包括两个部</description>
      </item>
      
      <item>
        <title>06. efficiency comparison</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/06_efficiency_comparison/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/06_efficiency_comparison/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 import multiprocessing as mp import threading as td import time def</description>
      </item>
      
      <item>
        <title>06. index-slice-iterator</title>
        <link>https://yorkfish.github.io/review/python/numpy/06_ndarray_slice/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/06_ndarray_slice/</guid>
        <description>1. 导入 1 import numpy as np 2. 操作 切片 一维 1 2 3 4 5 6 7 8 9 10 11 12 &amp;gt;&amp;gt;&amp;gt; a = np.arange(12) &amp;gt;&amp;gt;&amp;gt; print(a) [ 0 1 2 3 4 5 6 7 8 9 10 11] &amp;gt;&amp;gt;&amp;gt; print(a[1]) 1 &amp;gt;&amp;gt;&amp;gt; print(a[2:8]) [2 3 4 5 6 7] &amp;gt;&amp;gt;&amp;gt; print(a[2:8:2]) [2 4 6] &amp;gt;&amp;gt;&amp;gt; print(a[::-1]) [11 10 9 8 7 6</description>
      </item>
      
      <item>
        <title>07. pattern modifier</title>
        <link>https://yorkfish.github.io/review/regex/07_pattern_modifier/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/07_pattern_modifier/</guid>
        <description>C# 称“处理选项”(RegexOptions) Js 称“模式修正符”(RegexOptions) Python3 中表现为 flag 一般允许混搭 C# IgnoreCase: 忽略大小写 RightToLeft: 从右向左查</description>
      </item>
      
      <item>
        <title>07. lock</title>
        <link>https://yorkfish.github.io/review/python/threading/07_lock/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/07_lock/</guid>
        <description>例一 未加锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import threading def test_count(): global count for _ in range(10_0000): count += 1 if __name__ == &amp;#34;__main__&amp;#34;: count = 0 threads = [] for _ in range(10): t = threading.Thread(target=test_count) t.start() threads.append(t) for t in threads: t.join() print(count) # 应该是 10 * 100000 =</description>
      </item>
      
      <item>
        <title>07. Queue</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/07_queue/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/07_queue/</guid>
        <description>例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import multiprocessing def consumer(input_q): print(&amp;#34;Into consumer&amp;#34;) while True: item = input_q.get() # 处理项 print(&amp;#34;pull&amp;#34;, item, &amp;#34;out of queue&amp;#34;) # 此处替换为有用的工作 input_q.task_done() # 发出信</description>
      </item>
      
      <item>
        <title>07. Radiobutton</title>
        <link>https://yorkfish.github.io/review/python/tkinter/07_radiobutton/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/07_radiobutton/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 7 8 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) l = tk.Label(window, text=&amp;#34;empty&amp;#34;, bg=&amp;#34;yellow&amp;#34;, width=20, height=2) l.pack() window.mainloop() 2. 添加一个 radiobutton 1 2 3 4 5 6 7 8 9 10 string = tk.StringVar() def print_selection(): l.config(text=&amp;#34;you have selected &amp;#34; + string.get()) r = tk.Radiobutton(window, text=&amp;#34;Option A&amp;#34;, variable=string, value=&amp;#39;A&amp;#39;, font=(&amp;#34;Consolas&amp;#34;,</description>
      </item>
      
      <item>
        <title>07. encode</title>
        <link>https://yorkfish.github.io/review/python/operation/07_gbk/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/operation/07_gbk/</guid>
        <description>1. 问题 命令行敲 python，出现如下错误 ... UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0x8f in position 500: illegal multibyte sequence ... 2. 解决 方法一 来到目录：C:\Users\{username} 比如我的：</description>
      </item>
      
      <item>
        <title>07. function arguments</title>
        <link>https://yorkfish.github.io/review/python/basics/07_function_arguments/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/07_function_arguments/</guid>
        <description>1. 说明 与另的语言不同，Python 的函数可以很多参数 参数多了，可读性会降低 Python 3.8 之后的两个符号 /: 此符号之前的参数必须是位置参数 *: 此符号之后的参</description>
      </item>
      
      <item>
        <title>07. map()</title>
        <link>https://yorkfish.github.io/review/python/bif/07_map/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/07_map/</guid>
        <description>1. 说明 函数名：map 顾名思意：映射 2. 举例 例一 1 2 3 4 5 &amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4, 5] &amp;gt;&amp;gt;&amp;gt; b = [_ for _ in a] &amp;gt;&amp;gt;&amp;gt; b [1, 2, 3, 4, 5] &amp;gt;&amp;gt;&amp;gt; 例二 1 2 3 4 5 6 7 8 9 &amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4, 5]</description>
      </item>
      
      <item>
        <title>07. ndarray operation</title>
        <link>https://yorkfish.github.io/review/python/numpy/07_ndarray_operation/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/07_ndarray_operation/</guid>
        <description>1. 导入 1 import numpy as np 2. 操作 创建 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;gt;&amp;gt;&amp;gt; a = np.arange(12) &amp;gt;&amp;gt;&amp;gt; b = a.reshape((3, 4)) &amp;gt;&amp;gt;&amp;gt; print(a) [ 0 1 2 3 4 5 6 7 8 9 10 11] &amp;gt;&amp;gt;&amp;gt; print(b) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11]] &amp;gt;&amp;gt;&amp;gt; id(a) 1809452646272</description>
      </item>
      
      <item>
        <title>07. 局部变量</title>
        <link>https://yorkfish.github.io/review/python/class/07_local_var/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/07_local_var/</guid>
        <description>举例 1 2 3 4 5 6 7 8 9 10 11 12 &amp;gt;&amp;gt;&amp;gt; class Hero(object): ... game_name = &amp;#34;LOL&amp;#34; # 类变量 ... def __init__(self, name): ... self.name = name # 实例变量 ... def flash(self): ... count = 0 # 局部变量 ... print(f&amp;#34;{self.name} used flash&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; lijing = Hero(&amp;#34;Lijing&amp;#34;) &amp;gt;&amp;gt;&amp;gt; lijing.flash() Lijing used flash &amp;gt;&amp;gt;&amp;gt;</description>
      </item>
      
      <item>
        <title>07. auto</title>
        <link>https://yorkfish.github.io/review/c/function/07_auto/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/07_auto/</guid>
        <description>1. 关键字 auto 2. 说明 “自动变量”是函数中的局部变量 关键字可以省略，若省略，则隐含确定为“自动存储类别” 属于动态存储方式，数据存储在动态存储区中 如</description>
      </item>
      
      <item>
        <title>07. fgets() &amp; fputs()</title>
        <link>https://yorkfish.github.io/review/c/file/07_fgets_and_fputs/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/07_fgets_and_fputs/</guid>
        <description>1. 简介 fgets: 从指定文件读取一个字符串 fputs: 向指定文件写进一个字符串 2. 举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include &amp;lt;stdio.h&amp;gt; int main() { FILE* fp = fopen(&amp;#34;test.txt&amp;#34;, &amp;#34;w&amp;#34;); fputs(&amp;#34;China&amp;#34;, fp); // 把字符串 &amp;#34;China&amp;#34; 输出到 fp 指</description>
      </item>
      
      <item>
        <title>07. 共用体概述</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/07_overview_of_union/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/07_overview_of_union/</guid>
        <description>1. 一般定义形式 union 共用体 { 成员表列 } 变量表列; 2. 说明 使几种不同的变量共占同一段内存的结构，称为“共用体” 共用体与结构体的定义形式相似，但它们的</description>
      </item>
      
      <item>
        <title>07. 指针数组和指针的指针</title>
        <link>https://yorkfish.github.io/review/c/pointer/07_pointer_array_and_pointer_to_pointer/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/07_pointer_array_and_pointer_to_pointer/</guid>
        <description>1. 指针数组的概念 一般定义形式 类型名 * 数组名[数组长度]; 如：int * p[4]; ps [] 比 * 优先级高 字符串比较应当用 strcmp 函数 2. 指向指针的指针 举例 1 2 3 4 5 6</description>
      </item>
      
      <item>
        <title>07. 结合方向</title>
        <link>https://yorkfish.github.io/review/c/basics/07_combination_direction/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/07_combination_direction/</guid>
        <description>不推荐下文例子中的写法 1. 右结合性 即“自右向左”结合 例一 如 -i++ &amp;gt; -(i++) 1 2 3 4 5 6 7 8 9 #include &amp;lt;stdio.h&amp;gt; int main() { int i = 10; printf(&amp;#34;%d\n&amp;#34;, -i++); // -10 printf(&amp;#34;%d\n&amp;#34;, i); // 11 return 0; } “负号”与 ++ 同级，默</description>
      </item>
      
      <item>
        <title>08. greedy and non-greedy</title>
        <link>https://yorkfish.github.io/review/regex/08_greedy_and_non-greedy/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/08_greedy_and_non-greedy/</guid>
        <description>1. 贪婪 一般情况下，正则默认贪婪匹配 尽可能多得匹配 如 用 y.*h 去匹配 yorkfish-yorkfish 得到 yorkfish-yorkfish 2. 非贪婪 在相应规则之后加上 ?，表示使用非贪婪模式 尽可能少得匹配 如 用 y.*?h 去匹</description>
      </item>
      
      <item>
        <title>08. pid</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/08_pid/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/08_pid/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import multiprocessing as mp import os import time def sing(num, name): print(&amp;#34;唱歌进程的 pid：&amp;#34;, os.getpid()) pri</description>
      </item>
      
      <item>
        <title>08. semaphore</title>
        <link>https://yorkfish.github.io/review/python/threading/08_semaphore/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/08_semaphore/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import threading import time semaphore = threading.Semaphore(3) # 最多 3 个线程同时使用资源 def func(): if semaphore.acquire(): for _ in range(5): print(threading.currentThread().getName(), &amp;#34;get semaphore&amp;#34;) time.sleep(5) semaphore.release() print(threading.currentThread().getName(), &amp;#34;release semaphore&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: for _ in range(8): t1 = threading.Thread(target=func) t1.start() &amp;gt;&amp;gt;&amp;gt; Thread-1</description>
      </item>
      
      <item>
        <title>08. Scale</title>
        <link>https://yorkfish.github.io/review/python/tkinter/08_scale/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/08_scale/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 7 8 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) l = tk.Label(window, text=&amp;#34;empty&amp;#34;, bg=&amp;#34;yellow&amp;#34;, width=30, height=2) l.pack() window.mainloop() 2. 添加一个 scale 1 2 3 4 5 6 7 8 9 def print_selection(v): l.config(text=&amp;#34;you have selected &amp;#34; + v) s = tk.Scale(window, label=&amp;#34;try me&amp;#34;, orient=&amp;#39;horizontal&amp;#39;, from_=0, to=10, length=400, showvalue=0, tickinterval=2, resolution=0.01,</description>
      </item>
      
      <item>
        <title>08. generator</title>
        <link>https://yorkfish.github.io/review/python/basics/08_generator/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/08_generator/</guid>
        <description>1. 简介 列表、集合、字典可以用生成式快速生成 2. 举例 1 2 3 4 5 6 7 8 9 &amp;gt;&amp;gt;&amp;gt; [i for i in range(10)] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; {s for s in range(10)} {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; {d: d%2==0</description>
      </item>
      
      <item>
        <title>08. IDLE</title>
        <link>https://yorkfish.github.io/review/python/operation/08_idle/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/operation/08_idle/</guid>
        <description>1. 提出问题 只安装了 Anaconda，想使用 IDLE 2. 解决方法 我的 Anaconda 装在 D:\anaconda3 方式一 双击 D:\anaconda3\Lib\idlelib\idle.bat 方式二 双击 D:\anaconda3\Scripts\idle.exe 双击后会先出现一个命令窗，再出来 IDLE 方式三 在桌面，右</description>
      </item>
      
      <item>
        <title>08. matplotlib pyplot</title>
        <link>https://yorkfish.github.io/review/python/numpy/08_matplotlib_pyplot/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/08_matplotlib_pyplot/</guid>
        <description>举例 1 2 3 4 5 6 7 8 9 10 11 import numpy as np import matplotlib.pyplot as plt def square(x): return -x**2 + 1 a = np.linspace(-5, 5, 200) # [-5, 5] 之内取 200 个点 plt.plot(a, square(a)) plt.show() 得到图片</description>
      </item>
      
      <item>
        <title>08. sorted()</title>
        <link>https://yorkfish.github.io/review/python/bif/08_sorted/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/08_sorted/</guid>
        <description>1. 说明 sort() 是 list 的方法 sorted() 是 Python 的内置函数，不隶属于某种数据类型 sorted() 可以对所有的可迭代对象进行排序 2. 举例 例一 1 2 3 4 5 6 7 8 9 10 11 &amp;gt;&amp;gt;&amp;gt; lst = [&amp;#34;Tony Black&amp;#34;, &amp;#34;Amy Green&amp;#34;, &amp;#34;Johnny Lee&amp;#34;] &amp;gt;&amp;gt;&amp;gt;</description>
      </item>
      
      <item>
        <title>08. 类方法与实例方法</title>
        <link>https://yorkfish.github.io/review/python/class/08_class_method_and_instance_method/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/08_class_method_and_instance_method/</guid>
        <description>举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Hero(object): # 类变量 game_name = &amp;#34;LOL&amp;#34; def __init__(self, name): # 实例变量 self.name = name # 实例方法 def flash(self): # 局部变量 count = 0</description>
      </item>
      
      <item>
        <title>08. rewind, fseek, ftell</title>
        <link>https://yorkfish.github.io/review/c/file/08_rewind-fseek-ftell/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/08_rewind-fseek-ftell/</guid>
        <description>1. rewind 简介 使位置指针重新返回文件的开头 此函数没有返回值 作用 文件的位置指针重新定位于开头 feof 的值恢复为 0（假） 2. fseek 简介 对流式文件可以进行顺序读写，</description>
      </item>
      
      <item>
        <title>08. static</title>
        <link>https://yorkfish.github.io/review/c/function/08_static/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/08_static/</guid>
        <description>1. 关键字 static 2. 说明 若希望函数中的局部变量在函数调用结束后继续存在，即其占用的存储单元不释放，需要用到静态局部变量 若之前调用过静态局部变量，则使</description>
      </item>
      
      <item>
        <title>08. 共用体的特点与使用</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/08_characteristics_of_union/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/08_characteristics_of_union/</guid>
        <description>1. 说明 每一瞬时，只有一个成员起作用 共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后，原有的成员就失效 共用体变量的地址和它的</description>
      </item>
      
      <item>
        <title>08. 动态分配内存与释放</title>
        <link>https://yorkfish.github.io/review/c/pointer/08_malloc_calloc_realloc_free/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/08_malloc_calloc_realloc_free/</guid>
        <description>1. malloc 函数原型 void * malloc(unsigned int size); 作用 在内存的动态存储区中分配一个长度为 size 的连续空间 此函数的值（即返回值），是一个分配域的起始地址，类型为 void 如果此函数未</description>
      </item>
      
      <item>
        <title>08. 输出格式</title>
        <link>https://yorkfish.github.io/review/c/basics/08_format/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/08_format/</guid>
        <description>常用格式 符号 释义 %o 八进制整型数 %d 十进制整型数，%i 也行 %Ld 十进制长整型数 %u 无符号整型数 %Lu 无符号长整型数 %x 十六进制整型数 %mc 字符占 m 个宽度，右对齐</description>
      </item>
      
      <item>
        <title>09. re-javascript</title>
        <link>https://yorkfish.github.io/review/regex/09_re-javascript/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/09_re-javascript/</guid>
        <description>1. 测试方法 方便起见，新建文档 test.html 写入 script 标签 在标签内写测试语句 用浏览器打开，按 F12 查看结果 2. 两种定义方式 方式一 直接量语法 1 2 3 var zz = /\d/; console.log(zz); // /\d/ console.log(typeof zz); //</description>
      </item>
      
      <item>
        <title>09. pool</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/09_pool/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/09_pool/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import multiprocessing def job(x): return x*x def multi_core(): pool = multiprocessing.Pool(processes=2) # 若不加参数，默认使用所有的核 res = pool.map(job, range(10)) print(res) if __name__ == &amp;#34;__main__&amp;#34;: multi_core() &amp;gt;&amp;gt;&amp;gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</description>
      </item>
      
      <item>
        <title>09. Timer</title>
        <link>https://yorkfish.github.io/review/python/threading/09_timer/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/09_timer/</guid>
        <description>例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import threading import time def func(): print(&amp;#34;I am running.&amp;#34;) time.sleep(4) print(&amp;#34;I am done.&amp;#34;) if __name__ == &amp;#34;__main__&amp;#34;: t = threading.Timer(6, func) # 6s 后执行 func t.start() i = 0 while True: print(i, &amp;#34;==========&amp;#34;) i += 1 time.sleep(3) &amp;gt;&amp;gt;&amp;gt; 0 ========== 1 ========== 2 ========== I am running. 3</description>
      </item>
      
      <item>
        <title>09. Checkbutton</title>
        <link>https://yorkfish.github.io/review/python/tkinter/09_checkbutton/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/09_checkbutton/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 7 8 9 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) l = tk.Label(window, text=&amp;#34;empty&amp;#34;, bg=&amp;#34;yellow&amp;#34;, font=(&amp;#34;Consolas&amp;#34;, 18), width=20) l.pack() window.mainloop() 2. 添加两个 checkbutton 1 2 3 4 5 6 7 8 9 10 var1 = tk.BooleanVar() var2 = tk.BooleanVar() c1 = tk.Checkbutton(window, text=&amp;#34;C &amp;#34;, font=(&amp;#34;Consolas&amp;#34;, 16), # 对齐~</description>
      </item>
      
      <item>
        <title>09. help</title>
        <link>https://yorkfish.github.io/review/python/basics/09_help/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/09_help/</guid>
        <description>1. 简介 help() 可以查看开发者对于“模块、函数、类”所编写的详细描述文档 2. 说明 例一 1 2 3 4 5 6 7 8 &amp;#34;&amp;#34;&amp;#34; This module is for explain &amp;#34;help()&amp;#34;. help 函数可以查看开发者对于“模块、函数</description>
      </item>
      
      <item>
        <title>09. hstack &amp; vstack</title>
        <link>https://yorkfish.github.io/review/python/numpy/09_hstack_and_vstack/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/09_hstack_and_vstack/</guid>
        <description>1. 导入 1 import numpy as py 2. 一维 创建 1 2 3 4 5 6 7 &amp;gt;&amp;gt;&amp;gt; a = np.arange(4) &amp;gt;&amp;gt;&amp;gt; b = np.arange(4, 8) &amp;gt;&amp;gt;&amp;gt; print(a) [0 1 2 3] &amp;gt;&amp;gt;&amp;gt; print(b) [4 5 6 7] &amp;gt;&amp;gt;&amp;gt; hstack 1 2 3 &amp;gt;&amp;gt;&amp;gt; print(np.hstack((a, b))) [0 1 2 3 4 5 6 7] &amp;gt;&amp;gt;&amp;gt; vstack 1 2 3 4 &amp;gt;&amp;gt;&amp;gt; print(np.vstack((a, b))) [[0 1 2 3]</description>
      </item>
      
      <item>
        <title>09. sum()</title>
        <link>https://yorkfish.github.io/review/python/bif/09_sum/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/09_sum/</guid>
        <description>1. 说明 一般地，除字符串外，能使用 + 操作的，都可以使用 sum() 2. 举例 例一 1 2 3 4 5 6 &amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; sum(a) 10 &amp;gt;&amp;gt;&amp;gt; sum(a, 5) 15 &amp;gt;&amp;gt;&amp;gt; 例二 1 2 3 4 &amp;gt;&amp;gt;&amp;gt; a = [[1, 2, 3]] * 3 &amp;gt;&amp;gt;&amp;gt; sum(a, [])</description>
      </item>
      
      <item>
        <title>09. 静态方法</title>
        <link>https://yorkfish.github.io/review/python/class/09_static_method/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/09_static_method/</guid>
        <description>1. 简介 “实例方法”只能由“实例对象”调用 “类”和“实例对象”都能调用“类方法”和“静态方法” “实例方法”、“类方法”和“静态方法”均能调用“</description>
      </item>
      
      <item>
        <title>09. ferror() &amp; clearerr()</title>
        <link>https://yorkfish.github.io/review/c/file/09_ferror_and_clearerr/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/09_ferror_and_clearerr/</guid>
        <description>1. ferror 简介 除了在 getc, putc, fread, fwrite 等函数出错时有用 还可以主动使用以检查 一般形式 ferror(fp); 说明 若返回值为 0，表示未出错 若返回一个非零值，表示出错 同一个文件每次调用</description>
      </item>
      
      <item>
        <title>09. goto</title>
        <link>https://yorkfish.github.io/review/c/basics/09_goto/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/09_goto/</guid>
        <description>无条件转向语句 1. 形式 goto 语句标号; 语句标号：用标识符表示，命名规则与标识符相同（字母、数字、下划线，不用数字开头） 如：goto label_1; 2. 使用 一般不用</description>
      </item>
      
      <item>
        <title>09. register</title>
        <link>https://yorkfish.github.io/review/c/function/09_register/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/09_register/</guid>
        <description>1. 结论 实际上，用 register 声明变量是不必要的 如今优化的编译系统能够识别频繁的变量，从而自动地将这些变量放在寄存器中 2. 了解 由于对寄存器的存取速度远高于</description>
      </item>
      
      <item>
        <title>09. 小结</title>
        <link>https://yorkfish.github.io/review/c/pointer/09_summary/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/pointer/09_summary/</guid>
        <description>1. 常见的数据类型 定义 含义 int i 定义整型变量 int * p p 为指向整型数据的指针变量 int a[n] 定义整型数组 a，它有 n 个元素 int * p[n] 定义指针数组 p，它由 n 个指向整</description>
      </item>
      
      <item>
        <title>09. 枚举</title>
        <link>https://yorkfish.github.io/review/c/struct-union-enum/09_enum/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/struct-union-enum/09_enum/</guid>
        <description>1. 使用场景 如果一个变量只有几种可能的值，则可以定义为枚举类型 变量的值只限于列举出来的值的范围 2. 一般定义形式 enum weekday {sun, mon, tue, wed, thu, fri, sat}; 3. 用法 例一 C 编译</description>
      </item>
      
      <item>
        <title>10. re-python3</title>
        <link>https://yorkfish.github.io/review/regex/10_re-python3/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/10_re-python3/</guid>
        <description>Python3-re: &amp;gt;&amp;gt;&amp;gt; 传送门 1. 必要的导入 1 &amp;gt;&amp;gt;&amp;gt; import re 2. 临时测试 1 2 3 &amp;gt;&amp;gt;&amp;gt; re.findall(&amp;#34;york&amp;#34;, &amp;#34;york yorkfish&amp;#34;) # 方法有许多，这种比较方便 [&amp;#39;york&amp;#39;, &amp;#39;york&amp;#39;] &amp;gt;&amp;gt;&amp;gt; 3. match 1 2 3 4 &amp;gt;&amp;gt;&amp;gt; re.match(&amp;#34;\d+&amp;#34;, &amp;#34;123 yorkfish&amp;#34;) &amp;lt;re.Match object; span=(0, 3), match=&amp;#39;123&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; re.match(&amp;#34;\d+&amp;#34;, &amp;#34;yorkfish 123&amp;#34;) &amp;gt;&amp;gt;&amp;gt; match 仅在字符串开</description>
      </item>
      
      <item>
        <title>10. lock</title>
        <link>https://yorkfish.github.io/review/python/multiprocessing/10_lock/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/multiprocessing/10_lock/</guid>
        <description>例一 数据类型 1 2 3 4 5 import multiprocessing as mp # 简单列举两项 value = mp.Value(&amp;#39;d&amp;#39;, 1) array = mp.Array(&amp;#39;i&amp;#39;, [1, 2, 3]) 例二 未加锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import multiprocessing as mp import time def job(v, num): for _</description>
      </item>
      
      <item>
        <title>10. supplement</title>
        <link>https://yorkfish.github.io/review/python/threading/10_supplement/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/threading/10_supplement/</guid>
        <description>1. threading 之前的版本 Python2 用的是 thread，Python3 将其改为 _thread 现在很少使用 _thread，不过认识一下也没坏处 例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
      </item>
      
      <item>
        <title>10. Canvas</title>
        <link>https://yorkfish.github.io/review/python/tkinter/10_canvas/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/10_canvas/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;500x300&amp;#34;) window.mainloop() 2. 添加一个 canvas 1 2 3 canvas = tk.Canvas(window, bg=&amp;#34;gray&amp;#34;, width=500, height=250) # ... canvas.pack() 3. 添加图片 1 2 image_file = tk.PhotoImage(file=&amp;#34;test.png&amp;#34;) image = canvas.create_image(0, 0, anchor=&amp;#34;nw&amp;#34;, image=image_file) ps Python 3.8 的 tkinter 支持 PGM, PPM, GIF, PNG</description>
      </item>
      
      <item>
        <title>10. concatenate</title>
        <link>https://yorkfish.github.io/review/python/numpy/10_concatenate/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/10_concatenate/</guid>
        <description>1. 简介 np.hstack() 与 np.vstack() 无法指定 axis 2. 操作 导入 1 import numpy as np 创建 1 2 3 4 5 6 7 8 &amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2], [3, 4]]) &amp;gt;&amp;gt;&amp;gt; b = np.array([[5, 6]]) &amp;gt;&amp;gt;&amp;gt; print(a) [[1 2] [3 4]] &amp;gt;&amp;gt;&amp;gt; print(b) [[5 6]] &amp;gt;&amp;gt;&amp;gt; 显示形状 1 2 3 4 5 &amp;gt;&amp;gt;&amp;gt; a.shape (2, 2) &amp;gt;&amp;gt;&amp;gt; b.shape (1,</description>
      </item>
      
      <item>
        <title>10. import</title>
        <link>https://yorkfish.github.io/review/python/basics/10_import/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/10_import/</guid>
        <description>例一 导入时避免使用相对路径 文件结构 D:\test prints.py import_issue.py import_issue.py 1 from .prints import * 运行结果 ... ImportError: attempted relative import with no known parent package ... 说明 . 所表示的根路径也是 &#39;__main__&#39; 的值 在入口文件中，应该避免使用相</description>
      </item>
      
      <item>
        <title>10. zip()</title>
        <link>https://yorkfish.github.io/review/python/bif/10_zip/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/bif/10_zip/</guid>
        <description>例一 1 2 3 4 lst_a = [&amp;#39;a1&amp;#39;, &amp;#39;b1&amp;#39;, &amp;#39;c1&amp;#39;] lst_b = [&amp;#39;a2&amp;#39;, &amp;#39;b2&amp;#39;, &amp;#39;c2&amp;#39;] for a, b in zip(lst_a, lst_b): print(a, b) &amp;gt;&amp;gt;&amp;gt; a1 a2 b1 b2 c1 c2 例二 有点像木桶原理，多出的数据不作处理 1 2 3 4 lst_c = [&amp;#39;a3&amp;#39;, &amp;#39;b3&amp;#39;, &amp;#39;c3&amp;#39;, &amp;#39;d3&amp;#39;, &amp;#39;e3&amp;#39;] lst_d = [&amp;#39;a4&amp;#39;, &amp;#39;b4&amp;#39;, &amp;#39;c4&amp;#39;] for c, d in</description>
      </item>
      
      <item>
        <title>10. 继承</title>
        <link>https://yorkfish.github.io/review/python/class/10_inheritance/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/class/10_inheritance/</guid>
        <description>公共部分 1 2 3 class Hero(object): def __init__(self, name): self.name = name 例一 1 2 3 4 5 6 7 8 class AD1(Hero): def __init__(self, name, gender): self.name = name self.gender = gender ashe = AD1(&amp;#34;艾希&amp;#34;, &amp;#34;female&amp;#34;) print(ashe.__dict__) &amp;gt;&amp;gt;&amp;gt; {&#39;name&#39;: &#39;艾希&#39;, &#39;gender&#39;: &#39;female&#39;} 例二 1</description>
      </item>
      
      <item>
        <title>10. extern</title>
        <link>https://yorkfish.github.io/review/c/function/10_extern/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/10_extern/</guid>
        <description>1. 声明外部变量 一般的做法：将外部变量的定义放在引用它的所有函数之前 类型名可写可不写 写：extern int A, B; 不写：extern A, B;，会有 warning 2. 编</description>
      </item>
      
      <item>
        <title>10. scanf</title>
        <link>https://yorkfish.github.io/review/c/basics/10_scanf/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/10_scanf/</guid>
        <description>1. 说明 若格式中有两个空格，应对应给到两个或更多的空格 输入数据时，遇到以下情况，认为结束 遇空格、回车、跳格键 超过指定宽度 非法输入 2. 举例 例一 因空</description>
      </item>
      
      <item>
        <title>10. 小结</title>
        <link>https://yorkfish.github.io/review/c/file/10_summary/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/file/10_summary/</guid>
        <description>分类 函数名 功能 打开文件 fopen() 打开文件 关闭文件 fclose() 关闭文件 文件定位 fseek() 改变文件位置指针的位置 rewind() 使文件位置指针重新至于文件开头 ftell() 返回文件位置指针的当前值</description>
      </item>
      
      <item>
        <title>11. re-terminal</title>
        <link>https://yorkfish.github.io/review/regex/11_re-terminal/</link>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/regex/11_re-terminal/</guid>
        <description>嫌虚拟机打开慢，可以使用 cmder, cygwin, gitbash 之类的工具 1. awk 形式：york$ awk &#39;/正则表达式/{print($0)}&#39; test.txt 功能：用相应的正则表达式去匹配文档 test.txt</description>
      </item>
      
      <item>
        <title>11. Menu</title>
        <link>https://yorkfish.github.io/review/python/tkinter/11_menu/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/11_menu/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 7 8 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) l = tk.Label(window, text=&amp;#34;do 0&amp;#34;, bg=&amp;#34;yellow&amp;#34;) l.pack() window.mainloop() 2. 添加 menubar 1 2 3 4 5 menubar = tk.Menu(window) filemenu = tk.Menu(menubar, tearoff=0) menubar.add_cascade(label=&amp;#34;File&amp;#34;, menu=filemenu, underline=1) filemenu.add_command(label=&amp;#34;New&amp;#34;, command=do_job) window.config(menu=menubar) # 将 window 的 menu 设置为自定义的 menubar ps</description>
      </item>
      
      <item>
        <title>11. lambda</title>
        <link>https://yorkfish.github.io/review/python/basics/11_lambda/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/11_lambda/</guid>
        <description>例一 平方 1 2 3 4 &amp;gt;&amp;gt;&amp;gt; a = lambda x: x ** 2 &amp;gt;&amp;gt;&amp;gt; a(3) 9 &amp;gt;&amp;gt;&amp;gt; 例二 最小值 1 2 3 4 &amp;gt;&amp;gt;&amp;gt; b = lambda x, y: x if x &amp;lt; y else y &amp;gt;&amp;gt;&amp;gt; b(66, 88) 66 &amp;gt;&amp;gt;&amp;gt; 例三 1 2 3 4 5 6 7 8 &amp;gt;&amp;gt;&amp;gt; lst = [lambda x: x.strip(), lambda x: x ** 2] &amp;gt;&amp;gt;&amp;gt; lst</description>
      </item>
      
      <item>
        <title>11. newaxis</title>
        <link>https://yorkfish.github.io/review/python/numpy/11_newaxis/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/11_newaxis/</guid>
        <description>1. 导入 1 import numpy as np 2. 举例 例一 1 2 3 4 5 6 &amp;gt;&amp;gt;&amp;gt; a = np.arange(4) &amp;gt;&amp;gt;&amp;gt; print(a) [0 1 2 3] &amp;gt;&amp;gt;&amp;gt; a.shape (4,) &amp;gt;&amp;gt;&amp;gt; 例二 1 2 3 4 5 6 7 8 9 &amp;gt;&amp;gt;&amp;gt; b = a.reshape((4, 1)) &amp;gt;&amp;gt;&amp;gt; print(b) [[0] [1] [2] [3]] &amp;gt;&amp;gt;&amp;gt; b.shape (4, 1) &amp;gt;&amp;gt;&amp;gt; 例三 1 2 3 4 5 6 7 8</description>
      </item>
      
      <item>
        <title>11. getchar() &amp; putchar()</title>
        <link>https://yorkfish.github.io/review/c/basics/11_getchar_and_putchar/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/11_getchar_and_putchar/</guid>
        <description>1. getchar() 说明 字符输入函数 从终端或系统隐含指定的输入设备，输入一个字符 举例 1 2 3 4 5 6 7 8 9 #include &amp;lt;stdio.h&amp;gt; int main() { char c; c = getchar(); printf(&amp;#34;%c\n&amp;#34;, c); return 0; } Input: y Output: y 2. putchar() 说明 字符输出</description>
      </item>
      
      <item>
        <title>11. 变量的声明与定义</title>
        <link>https://yorkfish.github.io/review/c/function/11_declaration_and_definition/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/11_declaration_and_definition/</guid>
        <description>1. 简介 组成 一个函数一般由两部分组成 声明部分 执行语句 声明与定义 函数的声明是函数的原型 函数的定义是函数的本身 int a; 既是声明，也是定义 extern a; 是声明，但</description>
      </item>
      
      <item>
        <title>12. Frame</title>
        <link>https://yorkfish.github.io/review/python/tkinter/12_frame/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/12_frame/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) window.mainloop() 2. 定义主 frame 1 2 frm = tk.Frame(window) frm.pack() 3. 定义左 frame 1 2 frm_l = tk.Frame(frm) frm_l.pack(side=&amp;#34;left&amp;#34;) frm_r 同理 4. 在左 frame 上添加 label 1 tk.Label(frm_l, text=&amp;#34;on the frm_l1&amp;#34;).pack() frm_r 同理 1 2 3 4</description>
      </item>
      
      <item>
        <title>12. list</title>
        <link>https://yorkfish.github.io/review/python/basics/12_list/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/12_list/</guid>
        <description>1. copy &amp;amp; deepcopy 例一 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; b = a &amp;gt;&amp;gt;&amp;gt; id(a) 2581819681792 &amp;gt;&amp;gt;&amp;gt; id(b) 2581819681792 &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; a[1] = 22 &amp;gt;&amp;gt;&amp;gt; id(a) 2581819681792 &amp;gt;&amp;gt;&amp;gt; id(b) 2581819681792 &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; a = [4, 5, 6] &amp;gt;&amp;gt;&amp;gt; id(a) 2581819678848 &amp;gt;&amp;gt;&amp;gt; id(b) 2581819681792 &amp;gt;&amp;gt;&amp;gt; 例二 1 2</description>
      </item>
      
      <item>
        <title>12. stack()</title>
        <link>https://yorkfish.github.io/review/python/numpy/12_stack/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/12_stack/</guid>
        <description>1. 简介 此 stack() 非彼 stack stack() 对每一个数组在 axis=0 上添加一维 把它们沿着这个新的维度串起来 2. 操作 导入 1 import numpy as np 例一 创建 沿着新的维度串起来 1 2 3 4 5 6 &amp;gt;&amp;gt;&amp;gt; a = np.array([1, 2])</description>
      </item>
      
      <item>
        <title>12. gets() &amp; puts()</title>
        <link>https://yorkfish.github.io/review/c/basics/12_gets_and_puts/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/12_gets_and_puts/</guid>
        <description>1. gets(字符数组) 说明 只针对一个字符串 从终端输入一个字符串到字符数组，并得到一个函数值 该函数值是字符数组的起始地址 举例 1 2 3 4 5 6 7 8 9</description>
      </item>
      
      <item>
        <title>12. 内部函数和外部函数</title>
        <link>https://yorkfish.github.io/review/c/function/12_internal_and_external_functions/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/function/12_internal_and_external_functions/</guid>
        <description>1. 内部函数 如果一个函数只能被本文件中其他函数所调用，它称为内部函数 在定义内部函数时，在函数名和函数类型的前面加 static，即 static 类型标识符 函</description>
      </item>
      
      <item>
        <title>13. Massagebox</title>
        <link>https://yorkfish.github.io/review/python/tkinter/13_massagebox/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/13_massagebox/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 7 import tkinter as tk import tkinter.messagebox # messagebox 需要另外导入 window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) window.mainloop() 2. 添加一个 button 并关联弹窗 1 2 3 4 5 def hit_me(): tk.messagebox.showinfo(title=&amp;#34;showinfo&amp;#34;, message=&amp;#34;This is showinfo.&amp;#34;) tk.Button(window, text=&amp;#34;hit me&amp;#34;, command=hit_me).pack() &amp;gt;&amp;gt;&amp;gt; ps: 有声音，与更</description>
      </item>
      
      <item>
        <title>13. colstack &amp; rowstack</title>
        <link>https://yorkfish.github.io/review/python/numpy/13_colstack_and_rowstack/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/numpy/13_colstack_and_rowstack/</guid>
        <description>1. 导入 1 import numpy as np colstack 例一 1 2 3 4 5 6 7 8 &amp;gt;&amp;gt;&amp;gt; a = np.array([1, 2, 3]) &amp;gt;&amp;gt;&amp;gt; b = np.array([4, 5, 6]) &amp;gt;&amp;gt;&amp;gt; c = np.column_stack((a, b)) &amp;gt;&amp;gt;&amp;gt; print(c) [[1 4] [2 5] [3 6]] &amp;gt;&amp;gt;&amp;gt; 例二 1 2 3 4 5 6 7 &amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]]) &amp;gt;&amp;gt;&amp;gt; b = np.array([[9, 8, 7], [6,</description>
      </item>
      
      <item>
        <title>13. plus</title>
        <link>https://yorkfish.github.io/review/python/basics/13_plus/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/13_plus/</guid>
        <description>1. 举例 例一 加数字 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &amp;gt;&amp;gt;&amp;gt; a = 1 &amp;gt;&amp;gt;&amp;gt; b = 1 &amp;gt;&amp;gt;&amp;gt; id(a) 140724528887584 &amp;gt;&amp;gt;&amp;gt; a += b &amp;gt;&amp;gt;&amp;gt; id(a) 140724528887616 &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; a = 1 &amp;gt;&amp;gt;&amp;gt; b = 1 &amp;gt;&amp;gt;&amp;gt; id(a) 140724528887584 &amp;gt;&amp;gt;&amp;gt; a = a + b &amp;gt;&amp;gt;&amp;gt; id(a) 140724528887616 &amp;gt;&amp;gt;&amp;gt; ps 数字的相加</description>
      </item>
      
      <item>
        <title>13. strcat()</title>
        <link>https://yorkfish.github.io/review/c/basics/13_strcat/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/13_strcat/</guid>
        <description>strcat(字符数组1, 字符数组2) 简介 string catenate 把“字符串2”接到“字符串1”的后面 使用 1 2 3 4 5 6 7 8 9 10 11 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; int main() { char str1[] = &amp;#34;abcde&amp;#34;; char str2[] = &amp;#34;123&amp;#34;; strcpy(str1, str2);</description>
      </item>
      
      <item>
        <title>14. pack &amp; grid &amp; place</title>
        <link>https://yorkfish.github.io/review/python/tkinter/14_pack_grid_place/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/tkinter/14_pack_grid_place/</guid>
        <description>1. 准备一个简易窗口 1 2 3 4 5 6 import tkinter as tk window = tk.Tk() window.title(&amp;#34;YorkFish&amp;#34;) window.geometry(&amp;#34;300x200&amp;#34;) window.mainloop() 2. pack 1 tk.Label(window, text=1).pack(side=&amp;#34;top&amp;#34;) ps: 除了 top，还有 bottom, left, right 3. grid 简单地说，就是按照格子摆放 1 2 3 for i in range(3): for j in range(4): tk.Label(window, text=1).grid(row=i,</description>
      </item>
      
      <item>
        <title>14. set</title>
        <link>https://yorkfish.github.io/review/python/basics/14_set/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/14_set/</guid>
        <description>1. set 间的运算 1 2 3 4 5 6 7 8 9 10 11 &amp;gt;&amp;gt;&amp;gt; a = {1, 2, 3} &amp;gt;&amp;gt;&amp;gt; b = {2, 3, 4} &amp;gt;&amp;gt;&amp;gt; a &amp;amp; b # intersection {2, 3} &amp;gt;&amp;gt;&amp;gt; a | b # union set {1, 2, 3, 4} &amp;gt;&amp;gt;&amp;gt; a - b {1} &amp;gt;&amp;gt;&amp;gt; a ^ b # difference set {1, 4} &amp;gt;&amp;gt;&amp;gt; 2. list 借助 set 解决</description>
      </item>
      
      <item>
        <title>14. strcpy() &amp; strncpy()</title>
        <link>https://yorkfish.github.io/review/c/basics/14_strcpy_and_strncpy/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/14_strcpy_and_strncpy/</guid>
        <description>1. strcpy(字符数组1, 字符串2) 简介 string copy 字符串赋值函数 将“字符串2”复制到“字符数组1”中去 注意事项 “字符数组1”必须定义得足够大，以</description>
      </item>
      
      <item>
        <title>15. swap</title>
        <link>https://yorkfish.github.io/review/python/basics/15_swap/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/15_swap/</guid>
        <description>例一 C 的话有溢出风险，Python 就不用担心了 1 2 3 4 5 6 7 8 9 10 &amp;gt;&amp;gt;&amp;gt; a = 1 &amp;gt;&amp;gt;&amp;gt; b = 2 &amp;gt;&amp;gt;&amp;gt; a = a + b &amp;gt;&amp;gt;&amp;gt; b = a - b &amp;gt;&amp;gt;&amp;gt; a = a - b &amp;gt;&amp;gt;&amp;gt; a 2 &amp;gt;&amp;gt;&amp;gt; b 1 &amp;gt;&amp;gt;&amp;gt; 例二 1 2</description>
      </item>
      
      <item>
        <title>15. strcmp()</title>
        <link>https://yorkfish.github.io/review/c/basics/15_strcmp/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/15_strcmp/</guid>
        <description>strcmp(字符串1, 字符串2) 简介 string compare 比较“字符串1”与“字符串2” 比较规则 若出现不同字符，以第一个不相同的字符的比较结果为准 str1 == str2 返回</description>
      </item>
      
      <item>
        <title>16. transmit</title>
        <link>https://yorkfish.github.io/review/python/basics/16_transmit/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/16_transmit/</guid>
        <description>1. 说明 若参数为不可变对象，如 int, str, tuple 等，采用的是“值传递”，相当于用形参接收参数，不影响原值 若参数为可变对象，如 list, dict 等，采用的是“引用传递”，</description>
      </item>
      
      <item>
        <title>16. strlen()</title>
        <link>https://yorkfish.github.io/review/c/basics/16_strlen/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/16_strlen/</guid>
        <description>strlen(字符数组) 简介 string length 测试字符串长度 注意事项 函数的值位字符串的实际长度，不包括 &#39;\0&#39; 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; int main() { char str1[] = &amp;#34;york&amp;#34;;</description>
      </item>
      
      <item>
        <title>17. try-except-else-finally</title>
        <link>https://yorkfish.github.io/review/python/basics/17_try-except-else-finally/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/17_try-except-else-finally/</guid>
        <description>例一 有点像 switch-case 1 2 3 4 5 6 7 8 9 10 try: a = b except ArithmeticError: print(&amp;#34;ArithmeticError!&amp;#34;) except KeyError: print(&amp;#34;KeyError!&amp;#34;) except TypeError: print(&amp;#34;TypeError!&amp;#34;) except Exception: print(&amp;#34;Some error!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; Some error! 例二 1 2 3 4 try: a = b except Exception as e: print(e) &amp;gt;&amp;gt;&amp;gt; name &#39;b&#39; is not defined 例三 1 2 3 4 5 6 try: a = b except</description>
      </item>
      
      <item>
        <title>17. strlwr() &amp; strupr()</title>
        <link>https://yorkfish.github.io/review/c/basics/17_strlwr_and_strupr/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/c/basics/17_strlwr_and_strupr/</guid>
        <description>1. strlwr(字符串) string lowercase 将字符串中的大写字母换成小写字母 2. strupr(字符车) string uppercase 将字符串中的小写字母换成大写字母 3. 使用 1 2 3 4 5 6 7</description>
      </item>
      
      <item>
        <title>18. underscore</title>
        <link>https://yorkfish.github.io/review/python/basics/18_underscroe/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/18_underscroe/</guid>
        <description>情形一 说明 后置单下划线 撞了关键字，但又懒得想变量名 举例 1 class_ = &amp;#34;101&amp;#34; tkinter.Scale() 的 from_ 参数 情形二 说明 下划线作占位符 少起一个名字 举例 1 a = [[1, 2, 3] for _ in range(10)] 情形三 说</description>
      </item>
      
      <item>
        <title>19. variable</title>
        <link>https://yorkfish.github.io/review/python/basics/19_variable/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/19_variable/</guid>
        <description>1. 全局变量 例一 1 2 3 4 5 6 7 8 9 def test(): global num num = 2 print(&amp;#34;&amp;gt;&amp;gt;&amp;gt; num =&amp;#34;, num) num = 1 test() print(&amp;#34;&amp;lt;&amp;lt;&amp;lt; num =&amp;#34;, num) &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; num = 2 &amp;lt;&amp;lt;&amp;lt; num = 2 例二 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def test(): num = 1 def inside(): global num num</description>
      </item>
      
      <item>
        <title>20. yield</title>
        <link>https://yorkfish.github.io/review/python/basics/20_yield/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/python/basics/20_yield/</guid>
        <description>1. 说明 属于 generator 有速度优势 协程会用到 2. 举例 公共部分 1 2 3 4 5 6 def fib(num): n, a, b = 0, 0, 1 while n &amp;lt; num: yield b # 相当于挂起；可以看成一种不退出的 return a, b = b, a+b n += 1</description>
      </item>
      
      <item>
        <title>Linux command - time</title>
        <link>https://yorkfish.github.io/review/blog/05_linux_command_time/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/05_linux_command_time/</guid>
        <description>以 C 为例 格式：time + 可执行文件名 结果：除了可执行文件的运行结果，还有 real, user, sys 三个时间可供查看</description>
      </item>
      
      <item>
        <title>Hugo-zdoc 添加图片</title>
        <link>https://yorkfish.github.io/review/blog/04_zdoc_add_image/</link>
        <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/04_zdoc_add_image/</guid>
        <description>&lt;p&gt;有两种方式&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>doc command</title>
        <link>https://yorkfish.github.io/review/blog/03_dos_command/</link>
        <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/03_dos_command/</guid>
        <description>&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;记事本&lt;/li&gt;
&lt;li&gt;CMD 颜色&lt;/li&gt;
&lt;li&gt;文件名含 &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>进制转换</title>
        <link>https://yorkfish.github.io/review/blog/02_binary-decimal_conversion/</link>
        <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/02_binary-decimal_conversion/</guid>
        <description>&lt;h2 id=&#34;1-二进制转十进制&#34;&gt;1. 二进制转十进制&lt;/h2&gt;
&lt;h3 id=&#34;例一-0b10111&#34;&gt;例一 0b101.11&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;整数部分：1 * 2&lt;sup&gt;2&lt;/sup&gt; + 0 * 2&lt;sup&gt;1&lt;/sup&gt; + 1 * 2&lt;sup&gt;0&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;小数部分：1 * 2&lt;sup&gt;-1&lt;/sup&gt; + 1 * 2&lt;sup&gt;-2&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      </item>
      
      <item>
        <title>Usage</title>
        <link>https://yorkfish.github.io/review/blog/01_usage/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://yorkfish.github.io/review/blog/01_usage/</guid>
        <description>&lt;h2 id=&#34;1-拷贝文档&#34;&gt;1. 拷贝文档&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;content&lt;/code&gt; 文件夹下新建 &lt;code&gt;blog&lt;/code&gt; 文件夹&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;root/themes/zdoc/exampleSite/content/en/blog/_index.md&lt;/code&gt; 拷贝过来&lt;/li&gt;
&lt;/ol&gt;</description>
      </item>
      
      <item>
        <title>About</title>
        <link>https://yorkfish.github.io/review/about/</link>
        <pubDate>Mon, 24 Aug 2020 17:07:22 +0800</pubDate>
        
        <guid>https://yorkfish.github.io/review/about/</guid>
        <description>1. 简介 博客：不求全，方便回忆 本人：野生的，菜鸟一只 2. 参考与感谢 C “谭爷爷”的绿皮书 正月点灯笼(Bilibili&amp;rsquo;s up) &amp;gt;&amp;gt;&amp;gt; 传送门 Python 刘</description>
      </item>
      
    
  </channel>
</rss>